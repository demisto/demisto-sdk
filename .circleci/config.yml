### =============================================================
### This configuration file is used by CircleCI build server
### https://circleci.com/docs/config-sample
### =============================================================
version: 2.1
orbs:
  python: circleci/python@<< pipeline.parameters.python-orb-version >>
  node: circleci/node@<< pipeline.parameters.node-orb-version >>
  orb-tools: circleci/orb-tools@10.0

parameters:
  python-orb-version:
    type: string
    default: "2.0.3"
  node-orb-version:
    type: string
    default: "5.0.1"
  cache-version:
    type: string
    default: v4  # Change this parameter to clear cache.
  global-docker-image:
    type: string
    default: cimg/python:3.10-node
  pythonversion_latest:
    type: string
    default: "3.10"


references:
    version_tag_regex: &version_tag_regex
      /^v\d+\.\d+\.\d+$/ # version regex vx.x.x (i.e. v1.2.3)

    filter_tag_only: &filter_tag_only
      tags:
          only: *version_tag_regex

    tag_filter: &tag_filter
      filters:
        tags:
          only: *version_tag_regex

    reqs_content_checkout: &reqs_content_checkout
      requires:
        - checkout-content

    install_neo4j: &install_neo4j
      run:
        name: Install Neo4j
        command: |
          curl -fsSL https://debian.neo4j.com/neotechnology.gpg.key | sudo gpg --dearmor -o /usr/share/keyrings/neo4j.gpg
          echo "deb [signed-by=/usr/share/keyrings/neo4j.gpg] https://debian.neo4j.com stable latest" | sudo tee -a /etc/apt/sources.list.d/neo4j.list
          sudo apt-get update
          sudo apt-get install neo4j
          sudo chown -R circleci /var/log/neo4j
          sudo chown -R circleci /var/lib/neo4j
          neo4j-admin set-initial-password test

    install_node_ci: &install_node_ci
      - node/install-packages:
          cache-version: << pipeline.parameters.cache-version >>

    install_poetry: &install_poetry
      - run:
          name: Install Poetry
          command: |
            # in old images we need to remove existing poetry
            rm -rf $HOME/.poetry/bin/poetry
            sudo curl -sSL https://install.python-poetry.org | python3 -
            poetry --version

    install_demisto_sdk: &install_demisto_sdk
      - python/install-packages:
          pkg-manager: "poetry"
          args: "--no-dev"
          cache-version: << pipeline.parameters.cache-version >>
          pre-install-steps:
            - run:
                name: export demisto-sdk to path
                command: echo 'export PYTHONPATH="${PYTHONPATH}:${HOME}/project"' >> $BASH_ENV
      - <<: *install_node_ci

    install_build_dependencies: &install_build_dependencies
      - python/install-packages: 
          pkg-manager: "poetry"
          args: "--extras build"
          cache-version: << pipeline.parameters.cache-version >>
          pre-install-steps:
            - run:
                name: Check if pyproject.toml is consistent with poetry.lock
                command: poetry lock --check
    
    requires_all: &requires_all
      requires:
            - precommit-checks
            - validate-files
            - create-content-artifacts
            - test-lint
            - run-integration-tests
            - run-unit-tests
            - build

jobs:
  run-unit-tests:
      parameters:
        pythonversion:
          type: string
      docker:
        - image: cimg/python:<< parameters.pythonversion >>-node
      parallelism: 8
      steps:
        - checkout
        - <<: *install_poetry
        - setup_remote_docker:
            version: 20.10.12
        - python/install-packages:
            pkg-manager: "poetry"
            cache-version: << pipeline.parameters.cache-version >>
        - <<: *install_node_ci
        - run:
            name: pytest
            no_output_timeout: 15m
            command: |
              shopt -u globstar

              # The first sed expression is to remove test files from under the demisto_sdk/commands/init/templates
              # directory from the globbed list of files. Need to manually remove them since the pytest 'ignore'
              # argument in pytest.ini is itself ignored when explicitly passing tests to pytest. The second is to
              # remove the integration tests (integration tests as opposed to unit tests) from the list because those
              # tests shouldn't be parallelized.
              TEST_FILES=$(circleci tests glob "**/*_test.py")
              TEST_FILES=$(echo "$TEST_FILES" | sed -E 's/\S*demisto_sdk\/commands\/init\/templates\S*\.py//g')
              TEST_FILES=$(echo "$TEST_FILES" | sed -E 's/\S*demisto_sdk\/tests\/integration_tests\S*\.py//g')
              TEST_FILES=$(echo "$TEST_FILES" | sed -E 's/\S*demisto_sdk\/commands\/content_graph\/tests\S*\.py//g')

              TEST_FILES=$(echo "$TEST_FILES" | circleci tests split --split-by=timings)

              mkdir test-results
              poetry run pytest -v --cov=demisto_sdk --cov-report=html --junitxml=test-results/junit.xml $TEST_FILES
        - store_test_results:
            path: test-results
        - store_artifacts:
            path: coverage_html_report
        - store_artifacts:
            path: test-results/junit.xml
        - run:
            name: Coveralls upload
            command: |
              if [ -n "$COVERALLS_REPO_TOKEN" ]; then
                pip install coveralls
                coveralls
              else
                echo "Skipping coveralls"
              fi


  run-integration-tests:
      parameters:
        pythonversion:
          type: string
      docker:
        - image: cimg/python:<< parameters.pythonversion >>-node
      steps:
        - checkout
        - <<: *install_neo4j
        - <<: *install_poetry
        - setup_remote_docker:
            version: 20.10.12
        - python/install-packages:
            pkg-manager: "poetry"
            cache-version: << pipeline.parameters.cache-version >>
        - <<: *install_node_ci
        - run:
            name: pytest - graph
            no_output_timeout: 15m
            command: |
              shopt -u globstar
              TEST_FILES=$(circleci tests glob "demisto_sdk/commands/content_graph/tests/*_test.py")

              mkdir graph-test-results
              poetry run pytest -v --junitxml=graph-test-results/junit.xml $TEST_FILES
        - store_test_results:
            path: graph-test-results        
        - run:
            name: pytest - integrations
            no_output_timeout: 15m
            command: |
              shopt -u globstar
              TEST_FILES=$(circleci tests glob "demisto_sdk/tests/integration_tests/**/*_test.py")

              mkdir integration-test-results
              poetry run pytest -v --junitxml=integration-test-results/junit.xml $TEST_FILES
        - store_test_results:
            path: integration-test-results



  precommit-checks:
      docker:
        - image: << pipeline.parameters.global-docker-image >>
      steps:
        - checkout
        - <<: *install_poetry
        - attach_workspace:
            at: ~/project
        - <<: *install_build_dependencies
        - run:
            name: create cache key for pre-commit
            command: |
              cp .pre-commit-config.yaml pre-commit-cache-key.txt
              poetry run python --version --version >> pre-commit-cache-key.txt
        - restore_cache:
            keys:
            - v1-pc-cache-{{ checksum "pre-commit-cache-key.txt" }}
        - run:
            name: Pre-commit
            command: |
              poetry run pre-commit --version
              poetry run pre-commit run -a
        - save_cache:
            key: v1-pc-cache-{{ checksum "pre-commit-cache-key.txt" }}
            paths:
              - ~/.cache/pre-commit

  checkout-content:
      docker:
        - image: << pipeline.parameters.global-docker-image >>
      steps:
        - checkout
        - run:
            name: Checkout the Content Repo
            command: |
              git clone --depth 1 https://github.com/demisto/content.git
              cd content
              git config diff.renameLimit 5000
              git --no-pager log -1
        - persist_to_workspace:
            root: ~/project
            paths:
              - content
  validate-files:
      docker:
        - image: << pipeline.parameters.global-docker-image >>
      steps:
        - checkout
        - <<: *install_poetry
        - attach_workspace:
            at: ~/project
        - <<: *install_build_dependencies
        - <<: *install_node_ci
        - run:
            name: Set Up & Create Id Set
            when: always
            environment:
              CI_COMMIT_BRANCH: "master"
            command: |
              source $(poetry env info --path)/bin/activate
              cd content
              demisto-sdk -v
              demisto-sdk create-id-set -o ./Tests/id_set.json --fail-duplicates
        - run:
            name: Merge Id Set
            when: always
            environment:
              CI_COMMIT_BRANCH: "master"
            command: |
              source $(poetry env info --path)/bin/activate
              cd content
              demisto-sdk -v
              export CIRCLE_ARTIFACTS="/home/circleci/project/artifacts"

              gsutil cp gs://marketplace-dist/content/private_id_set.json $CIRCLE_ARTIFACTS/unified_id_set.json
              demisto-sdk merge-id-sets -i1 ./Tests/id_set.json -i2 $CIRCLE_ARTIFACTS/unified_id_set.json -o $CIRCLE_ARTIFACTS/unified_id_set.json --fail-duplicates
        - run:
            name: Test validate files and yaml
            when: always
            environment:
              CI_COMMIT_BRANCH: "master"
            command: |
              source $(poetry env info --path)/bin/activate
              cd content
              demisto-sdk -v
              export ARTIFACTS_FOLDER="/home/circleci/project/artifacts"

              ./Tests/scripts/validate.sh
  test-lint:
      docker:
        - image: << pipeline.parameters.global-docker-image >>
      steps:
        - checkout
        - <<: *install_poetry
        - <<: *install_demisto_sdk
        - setup_remote_docker:
            version: 20.10.12
        - attach_workspace:
            at: ~/project
        - run:
            name: Test lint on python and ps files
            when: always
            no_output_timeout: 20m
            command: |

              source $(poetry env info --path)/bin/activate

              export SDK_LINT_FILES_CHANGED=$(git diff master... --name-only -- demisto_sdk/commands/lint)

              if [[ -z "${SDK_LINT_FILES_CHANGED}" ]]; then
                  echo "files under demisto_sdk/commands/lint did not change - Skipping lint runs."
                  exit 0
              fi
              cd content
              echo "lint files changed. running lint"
              
              # python file (CommonServerPython lint is running over python 3 and 2)
              demisto-sdk lint -i ./Packs/Base/Scripts/CommonServerPython --coverage-report ~/project/coverage-report
              if [[ -f ~/project/coverage-report/html/index.html && -f ~/project/coverage-report/coverage.xml ]]
                then
                  echo "coverage files found."
                else
                  echo "coverage files not found."
                  exit 1
              fi
              # ps file
              demisto-sdk lint -i ./Packs/Base/Scripts/CommonServerPowerShell
              
        - store_artifacts:
            path: /tmp/lint_env_installation.log
  create-content-artifacts:
      docker:
        - image: << pipeline.parameters.global-docker-image >>
      steps:
        - checkout
        - <<: *install_poetry
        - attach_workspace:
            at: ~/project
        - <<: *install_demisto_sdk
        - run:
            name: Test Create Content Artifacts
            when: always
            command: |
              source $(poetry env info --path)/bin/activate
              cd content
              demisto-sdk -v
              mkdir ./tmp

              demisto-sdk create-content-artifacts -a ./tmp
        - store_artifacts:
            path: content/tmp
  build:
      docker:
        - image: << pipeline.parameters.global-docker-image >>
      steps:
          - checkout
          - run:
              name: Build Distrubution
              command: poetry build
          - persist_to_workspace:
              root: ~/project
              paths:
                - dist
          - store_artifacts:
              path: dist

  deploy:
      docker:
        - image: << pipeline.parameters.global-docker-image >>
      steps:
        - checkout
        - <<: *install_poetry
        - attach_workspace:
            at: ~/project
        - run:
            name: Deploy Release to PyPi
            command: poetry publish -u __token__ -p ${PYPI_TOKEN}

  waiter:
    docker:
      - image: circleci/node
    steps:
      - run: |
          while [[ $(curl --location --request GET "https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/job" --header "Circle-Token: $CCI_TOKEN"| jq -r '.items[]|select(.name != "waiter")|.status' | grep -c "running") -gt 0 ]]
            do
              # sleep for 8 minutes
              sleep 480
            done
      - run: echo "All required jobs have now completed"

  slack-notifier:
    docker:
      - image: cimg/python:<< pipeline.parameters.pythonversion_latest >>-node
    steps:
      - checkout
      - <<: *install_poetry
      - python/install-packages:
          pkg-manager: "poetry"
          cache-version: << pipeline.parameters.cache-version >>
      - run:
          name: Run Slack Notifier
          command: |
            poetry run python3 demisto_sdk/utils/circle-ci/circle_ci_slack_notifier.py -wd $CIRCLE_WORKFLOW_ID -st $SLACK_TOKEN


workflows:
  version: 2.1
  build_and_release:
    jobs:
      - checkout-content:
          <<: *tag_filter
      - precommit-checks:
          <<: *tag_filter
      - run-unit-tests:
          <<: *tag_filter
          matrix:
            parameters:
              pythonversion: ["3.8", "3.9", "3.10"]   
          name: run-unit-tests-<< matrix.pythonversion >>
      - run-integration-tests:
          <<: *tag_filter
          matrix:
            parameters:
              pythonversion: ["3.8", "3.9", "3.10"]   
          name: run-integration-tests-<< matrix.pythonversion >>
      - validate-files:
          <<: *tag_filter
          <<: *reqs_content_checkout
      - test-lint:
          <<: *reqs_content_checkout
      - create-content-artifacts:
          <<: *tag_filter
          <<: *reqs_content_checkout
      - build:
          <<: *tag_filter
      - deploy:
          filters:
              tags:
                only: *version_tag_regex
              branches:
                ignore: /.*/
          <<: *requires_all
      - waiter:
          filters:
            branches:
              only: master
      - slack-notifier:
          requires:
            - waiter
          filters:
            branches:
              only: master  # notifies when a post-merge build fails
