type: map
mapping:
  id:
    type: str
    required: true
  name:
    type: str
    required: true
  description:
    type: str
    required: true
  fromVersion:
    type: str
  toVersion:
    type: str
  reportType:
    type: str
  tags:
    type: seq
    required: true
    sequence:
    - type: str
  createdBy:
    type: str
    required: true
  latestReportName:
    type: str
  modified:
    type: str
  type:
    type: str
    required: true
    enum: ['pdf', 'csv', 'docx']
  orientation:
    type: str
    required: true
    enum: ['landscape', 'portrait', '']
  recipients:
    type: seq
    required: true
    allowempty: true
    sequence:
    - type: str
  system:
    type: bool
  locked:
    type: bool
  runOnce:
    type: bool
  times:
    type: int
  startDate:
    type: str
  recurrent:
    type: bool
  nextScheduledTime:
    type: str
  endingDate:
    type: str
  timezoneOffset:
    type: int
  latestScheduledReportTime:
    type: str
  latestReportTime:
    type: str
  cronView:
    type: bool
  scheduled:
    type: bool
  runningUser:
    type: str
  paperSize:
    type: str
  latestReportUsername:
    type: str
  sensitive:
    type: bool
  disableHeader:
    type: bool
  dashboard:
    type: map
    mapping:
      id:
        type: str
      version:
        type: int
      modified:
        type: str
      fromDate:
        type: str
      toDate:
        type: str
      fromDateLicense:
        type: str
      name:
        type: str
      isPredefined:
        type: bool
      period:
        type: map
        mapping:
          byTo:
            type: str
          byFrom:
            type: str
          toValue:
            type: int
          fromValue:
            type: int
          field:
            type: str
          regex;(byTo:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
            type: str
          regex;(byFrom:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
            type: str
          regex;(toValue:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
            type: int
          regex;(fromValue:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
            type: int
          regex;(field:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
            type: str
      layout:
        type: seq
        sequence:
        - include: layout_schema
      regex;(version:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
        type: int
      regex;(modified:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
        type: str
      regex;(fromDate:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
        type: str
      regex;(toDate:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
        type: str
      regex;(fromDateLicense:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
        type: str
      regex;(name:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
        type: str
      regex;(isPredefined:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
        type: bool
      regex;(layout:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
        type: seq
        sequence:
        - include: layout_schema
  decoder:
    type: map
    mapping:
      regex;(.+):
        type: map
        mapping:
          type:
            type: str
            required: true
            enum: ['string', 'date', 'duration', 'image']
          value:
            type: scalar
          description:
            type: str
          regex;(type:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
            type: str
            enum: ['string', 'date', 'duration', 'image']
          regex;(value:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
            type: scalar
          regex;(description:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
            type: str
  sections:
    type: any
    required: true

  regex;(name:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: str
  regex;(description:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: str
  regex;(fromVersion:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: str
  regex;(toVersion:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: str
  regex;(reportType:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: str
  regex;(tags:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: seq
    sequence:
    - type: str
  regex;(createdBy:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: str
  regex;(latestReportName:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: str
  regex;(modified:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: str
  regex;(type:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: str
    enum: ['pdf', 'csv', 'docx']
  regex;(orientation:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: str
    enum: ['landscape', 'portrait', '']
  regex;(recipients:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: seq
    allowempty: true
    sequence:
    - type: str
  regex;(system:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: bool
  regex;(locked:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: bool
  regex;(runOnce:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: bool
  regex;(times:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: int
  regex;(startDate:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: str
  regex;(recurrent:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: bool
  regex;(nextScheduledTime:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: str
  regex;(endingDate:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: str
  regex;(timezoneOffset:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: int
  regex;(latestScheduledReportTime:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: str
  regex;(latestReportTime:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: str
  regex;(cronView:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: bool
  regex;(scheduled:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: bool
  regex;(runningUser:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: str
  regex;(paperSize:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: str
  regex;(latestReportUsername:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: str
  regex;(sensitive:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: bool
  regex;(disableHeader:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: bool
  regex;(sections:(xsoar)|(marketplacev2)|(xpanse)|(xsoar_on_prem)|(xsoar_saas)):
    type: any
schema;layout_schema:
  type: map
  mapping:
    id:
      type: str
    forceRange:
      type: bool
    x:
      type: int
    y:
      type: int
    i:
      type: str
    w:
      type: int
    h:
      type: int
    widget:
      type: map
      mapping:
        size:
          type: int
        dataType:
          type: str
        params:
          type: any
        query:
          type: str
        modified:
          type: str
        name:
          type: str
        isPredefined:
          type: bool
        version:
          type: int
        id:
          type: str
        widgetType:
          type: str
        dateRange:
          type: map
          mapping:
            fromDate:
              type: str
            toDate:
              type: str
            fromDateLicense:
              type: str
            period:
              type: map
              mapping:
                byTo:
                  type: str
                byFrom:
                  type: str
                toValue:
                  type: int
                fromValue:
                  type: int
                field:
                  type: str
