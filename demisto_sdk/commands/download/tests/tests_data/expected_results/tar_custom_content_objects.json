{
    "automation-CommonServerUserPowerShell.yml": {
        "id": "CommonServerUserPowerShell",
        "name": "CommonServerUserPowerShell",
        "entity": "Scripts",
        "type": "script",
        "file_name": "script-CommonServerUserPowerShell.yml",
        "file_extension": "yml",
        "data": {
            "comment": "Common user-defined code that is merged into each script and integration during execution. You can use this script to define functions that are used by scripts and integrations. The code is not merged into system integrations. To also disable merging the code into system scripts, set the 'content.oob.script.use_common_user' advanced server parameter to 'false'.",
            "commonfields": {
                "id": "CommonServerUserPowerShell",
                "version": -1
            },
            "contentitemexportablefields": {
                "contentitemfields": {
                    "definitionid": "",
                    "fromServerVersion": "5.5.0",
                    "itemVersion": "",
                    "packID": "",
                    "packName": "",
                    "toServerVersion": ""
                }
            },
            "engineinfo": {},
            "mainengineinfo": {},
            "name": "CommonServerUserPowerShell",
            "pswd": "",
            "runas": "DBotWeakRole",
            "runonce": false,
            "script": "",
            "scripttarget": 0,
            "tags": [
                "infra",
                "server"
            ],
            "type": "powershell"
        },
        "code_lang": "powershell"
    },
    "automation-CommonServerUserPython.yml": {
        "id": "CommonServerUserPython",
        "name": "CommonServerUserPython",
        "entity": "Scripts",
        "type": "script",
        "file_name": "script-CommonServerUserPython.yml",
        "file_extension": "yml",
        "data": {
            "comment": "Common user-defined code that is merged into each script and integration during execution. You can use this script to define functions that are used by scripts and integrations. The code is not merged into system integrations. To also disable merging the code into system scripts, set the 'content.oob.script.use_common_user' advanced server parameter to 'false'.",
            "commonfields": {
                "id": "CommonServerUserPython",
                "version": -1
            },
            "engineinfo": {},
            "mainengineinfo": {},
            "name": "CommonServerUserPython",
            "pswd": "",
            "runas": "DBotWeakRole",
            "runonce": false,
            "script": "",
            "scripttarget": 0,
            "subtype": "python2",
            "tags": [
                "infra",
                "server"
            ],
            "type": "python"
        },
        "code_lang": "python"
    },
    "automation-custom_automation.yml": {
        "id": "e4c2306d-5d4b-4b19-8320-6fdad94595d4",
        "name": "custom_automation",
        "entity": "Scripts",
        "type": "script",
        "file_name": "script-custom_automation.yml",
        "file_extension": "yml",
        "data": {
            "commonfields": {
                "id": "e4c2306d-5d4b-4b19-8320-6fdad94595d4",
                "version": -1
            },
            "dockerimage": "demisto/python3:3.10.11.56082",
            "enabled": true,
            "engineinfo": {},
            "mainengineinfo": {},
            "name": "custom_automation",
            "pswd": "",
            "runas": "DBotWeakRole",
            "runonce": false,
            "script": "",
            "scripttarget": 0,
            "subtype": "python3",
            "tags": [],
            "type": "python"
        },
        "code_lang": "python"
    },
    "automation-custom_script.yml": {
        "id": "de57b1f7-b754-43d2-8a8c-379d12bdddcd",
        "name": "custom_script",
        "entity": "Scripts",
        "type": "script",
        "file_name": "script-custom_script.yml",
        "file_extension": "yml",
        "data": {
            "commonfields": {
                "id": "de57b1f7-b754-43d2-8a8c-379d12bdddcd",
                "version": -1
            },
            "dockerimage": "demisto/python3:3.10.11.56082",
            "engineinfo": {},
            "mainengineinfo": {},
            "name": "custom_script",
            "pswd": "",
            "runas": "DBotWeakRole",
            "runonce": false,
            "script": "",
            "scripttarget": 0,
            "tags": [],
            "type": "python"
        },
        "code_lang": "python"
    },
    "incidentfield-custom_incident.json": {
        "id": "incident_customincident",
        "name": "custom_incident",
        "entity": "IncidentFields",
        "type": "incidentfield",
        "file_name": "incidentfield-custom_incident.json",
        "file_extension": "json",
        "data": {
            "aliasTo": "",
            "aliases": null,
            "associatedToAll": true,
            "associatedTypes": null,
            "autoCompleteTags": null,
            "breachScript": "",
            "cacheVersn": 0,
            "caseInsensitive": true,
            "cliName": "customincident",
            "closeForm": false,
            "columns": null,
            "content": false,
            "defaultRows": null,
            "definitionId": "",
            "description": "",
            "editForm": true,
            "fieldCalcScript": "",
            "fromServerVersion": "",
            "group": 0,
            "hidden": false,
            "id": "incident_customincident",
            "isReadOnly": false,
            "itemVersion": "",
            "locked": false,
            "mergeStrategy": "",
            "name": "custom_incident",
            "neverSetAsRequired": false,
            "openEnded": false,
            "orgType": "shortText",
            "ownerOnly": false,
            "packID": "",
            "packName": "",
            "placeholder": "",
            "required": false,
            "runScriptAfterUpdate": false,
            "script": "",
            "selectValues": null,
            "sla": 0,
            "system": false,
            "systemAssociatedTypes": null,
            "template": "",
            "threshold": 72,
            "toServerVersion": "",
            "type": "shortText",
            "unmapped": false,
            "unsearchable": true,
            "useAsKpi": false,
            "validatedError": "",
            "validationRegex": "",
            "version": -1,
            "x2_fields": ""
        }
    },
    "incidenttype-Custom_Layout.json": {
        "id": "Custom_Layout",
        "name": "Custom_Layout",
        "entity": "IncidentTypes",
        "type": "incidenttype",
        "file_name": "incidenttype-Custom_Layout.json",
        "file_extension": "json",
        "data": {
            "autorun": false,
            "cacheVersn": 0,
            "closureScript": "",
            "color": "#F8E7A5",
            "days": 0,
            "daysR": 0,
            "default": false,
            "definitionId": "",
            "detached": false,
            "disabled": false,
            "extractSettings": {
                "fieldCliNameToExtractSettings": {},
                "mode": "Specific"
            },
            "fromServerVersion": "",
            "hours": 0,
            "hoursR": 0,
            "id": "Custom_Layout",
            "itemVersion": "",
            "layout": "84731e69-0e55-40f9-806a-6452f97a01a0",
            "locked": false,
            "name": "Custom_Layout",
            "onChangeRepAlg": 0,
            "packID": "",
            "packName": "",
            "playbookId": "a53a2f17-2f05-486d-867f-a36c9f5b88d4",
            "preProcessingScript": "",
            "readonly": false,
            "reputationCalc": 0,
            "system": false,
            "toServerVersion": "",
            "version": -1,
            "weeks": 0,
            "weeksR": 0
        }
    },
    "integration-custom_integration.yml": {
        "id": "custom_integration",
        "name": "custom_integration",
        "entity": "Integrations",
        "type": "integration",
        "file_name": "integration-custom_integration.yml",
        "file_extension": "yml",
        "data": {
            "category": "Utilities",
            "commonfields": {
                "id": "custom_integration",
                "version": -1
            },
            "configuration": [
                {
                    "additionalinfo": "Reliability of the source providing the intelligence data.",
                    "defaultvalue": "C - Fairly reliable",
                    "display": "Source Reliability",
                    "name": "integrationReliability",
                    "options": [
                        "A+ - 3rd party enrichment",
                        "A - Completely reliable",
                        "B - Usually reliable",
                        "C - Fairly reliable",
                        "D - Not usually reliable",
                        "E - Unreliable",
                        "F - Reliability cannot be judged"
                    ],
                    "required": false,
                    "type": 15
                },
                {
                    "defaultvalue": "https://soar.monstersofhack.com",
                    "display": "Server URL (e.g. https://soar.monstersofhack.com)",
                    "name": "url",
                    "required": true,
                    "type": 0
                },
                {
                    "display": "Fetch incidents",
                    "name": "isFetch",
                    "required": false,
                    "type": 8
                },
                {
                    "display": "Incident type",
                    "name": "incidentType",
                    "required": false,
                    "type": 13
                },
                {
                    "defaultvalue": "10",
                    "display": "Maximum number of incidents per fetch",
                    "name": "max_fetch",
                    "required": false,
                    "type": 0
                },
                {
                    "display": "API Key",
                    "name": "apikey",
                    "required": true,
                    "type": 4
                },
                {
                    "additionalinfo": "Set this to determine the HelloWorld score that will determine if an IP is malicious (0-100)",
                    "defaultvalue": "65",
                    "display": "Score threshold for IP reputation command",
                    "name": "threshold_ip",
                    "required": false,
                    "type": 0
                },
                {
                    "additionalinfo": "Set this to determine the HelloWorld score that will determine if a domain is malicious (0-100)",
                    "defaultvalue": "65",
                    "display": "Score threshold for domain reputation command",
                    "name": "threshold_domain",
                    "required": false,
                    "type": 0
                },
                {
                    "defaultvalue": "ACTIVE",
                    "display": "Fetch alerts with status (ACTIVE, CLOSED)",
                    "name": "alert_status",
                    "options": [
                        "ACTIVE",
                        "CLOSED"
                    ],
                    "required": false,
                    "type": 15
                },
                {
                    "additionalinfo": "Comma-separated list of types of alerts to fetch. Types might change over time. Some examples are 'Bug' and 'Vulnerability'",
                    "display": "Fetch alerts with type",
                    "name": "alert_type",
                    "required": false,
                    "type": 0
                },
                {
                    "defaultvalue": "Low",
                    "display": "Minimum severity of alerts to fetch",
                    "name": "min_severity",
                    "options": [
                        "Low",
                        "Medium",
                        "High",
                        "Critical"
                    ],
                    "required": true,
                    "type": 15
                },
                {
                    "defaultvalue": "3 days",
                    "display": "First fetch time",
                    "name": "first_fetch",
                    "required": false,
                    "type": 0
                },
                {
                    "display": "Trust any certificate (not secure)",
                    "name": "insecure",
                    "required": false,
                    "type": 8
                },
                {
                    "display": "Use system proxy settings",
                    "name": "proxy",
                    "required": false,
                    "type": 8
                },
                {
                    "defaultvalue": "1",
                    "display": "Incidents Fetch Interval",
                    "name": "incidentFetchInterval",
                    "required": false,
                    "type": 19
                }
            ],
            "description": "This is the Hello World integration for getting started.",
            "detaileddescription": "### Community Contributed Integration\n #### Integration Author: Cortex XSOAR\n No support or maintenance is provided by the author. Customers are encouraged to engage with the user community for questions and guidance at the [Cortex XSOAR Live Discussions](https://live.paloaltonetworks.com/t5/cortex-xsoar-discussions/bd-p/Cortex_XSOAR_Discussions).\n***\n## Hello World\n- This section explains how to configure the instance of HelloWorld in Cortex XSOAR.\n- You can use the following API Key: `43ea9b2d-4998-43a6-ae91-aba62a26868c`\n\n---\n[View Integration Documentation](https://xsoar.pan.dev/docs/reference/integrations/hello-world)",
            "display": "custom_integration",
            "name": "custom_integration",
            "script": {
                "commands": [
                    {
                        "arguments": [
                            {
                                "description": "The name of whom you want to say hello to.",
                                "name": "name"
                            }
                        ],
                        "description": "Hello command - prints hello to anyone.",
                        "name": "helloworld-say-hello",
                        "outputs": [
                            {
                                "contextPath": "hello",
                                "description": "Should be Hello **something** here.",
                                "type": "String"
                            }
                        ]
                    },
                    {
                        "arguments": [
                            {
                                "description": "Filter by alert severity. Comma-separated value (Low,Medium,High,Critical)",
                                "name": "severity"
                            },
                            {
                                "auto": "PREDEFINED",
                                "description": "Filter by alert status.",
                                "name": "status",
                                "predefined": [
                                    "ACTIVE",
                                    "CLOSED"
                                ]
                            },
                            {
                                "description": "Filter by alert type",
                                "name": "alert_type"
                            },
                            {
                                "description": "Maximum results to return.",
                                "name": "max_results"
                            },
                            {
                                "description": "Filter by start time. \nExamples:\n  \"3 days ago\"\n  \"1 month\"\n  \"2019-10-10T12:22:00\"\n  \"2019-10-10\"",
                                "name": "start_time"
                            }
                        ],
                        "description": "Search HelloWorld Alerts.",
                        "name": "helloworld-search-alerts",
                        "outputs": [
                            {
                                "contextPath": "HelloWorld.Alert.alert_id",
                                "description": "Alert ID.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Alert.alert_status",
                                "description": "Alert status. Can be 'ACTIVE' or 'CLOSED'.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Alert.alert_type",
                                "description": "Alert type. For example 'Bug' or 'Vulnerability'.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Alert.created",
                                "description": "Alert created time. Format is ISO8601 (i.e. '2020-04-30T10:35:00.000Z').",
                                "type": "Date"
                            },
                            {
                                "contextPath": "HelloWorld.Alert.name",
                                "description": "Alert name.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Alert.severity",
                                "description": "Alert severity. Can be 'Low', 'Medium', 'High' or 'Critical'.",
                                "type": "String"
                            }
                        ]
                    },
                    {
                        "arguments": [
                            {
                                "description": "Alert ID.",
                                "name": "alert_id",
                                "required": true
                            }
                        ],
                        "description": "Retrieve alert extra data by ID.",
                        "name": "helloworld-get-alert",
                        "outputs": [
                            {
                                "contextPath": "HelloWorld.Alert.alert_id",
                                "description": "Alert ID.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Alert.created",
                                "description": "Alert created time. Format is ISO8601 (i.e. '2020-04-30T10:35:00.000Z').",
                                "type": "Date"
                            },
                            {
                                "contextPath": "HelloWorld.Alert.description",
                                "description": "Alert description.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Alert.device_id",
                                "description": "ID of the device involved in the alert.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Alert.device_ip",
                                "description": "IP Address of the device involved in the alert.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Alert.location",
                                "description": "Location of the device involved in the alert.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Alert.user",
                                "description": "User involved in the alert.",
                                "type": "String"
                            }
                        ]
                    },
                    {
                        "arguments": [
                            {
                                "description": "Alert ID to update.",
                                "name": "alert_id",
                                "required": true
                            },
                            {
                                "auto": "PREDEFINED",
                                "description": "New status of the alert.",
                                "name": "status",
                                "predefined": [
                                    "ACTIVE",
                                    "CLOSED"
                                ],
                                "required": true
                            }
                        ],
                        "description": "Update the status for an alert.",
                        "name": "helloworld-update-alert-status",
                        "outputs": [
                            {
                                "contextPath": "HelloWorld.Alert.alert_id",
                                "description": "Alert ID.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Alert.updated",
                                "description": "Alert update time. Format is ISO8601 (i.e. '2020-04-30T10:35:00.000Z').",
                                "type": "Date"
                            },
                            {
                                "contextPath": "HelloWorld.Alert.alert_status",
                                "description": "Alert status. Can be 'ACTIVE' or 'CLOSED'.",
                                "type": "String"
                            }
                        ]
                    },
                    {
                        "arguments": [
                            {
                                "default": true,
                                "description": "List of IPs.",
                                "isArray": true,
                                "name": "ip"
                            },
                            {
                                "defaultValue": "65",
                                "description": "If the IP has reputation above the threshold then the IP defined as malicious. If threshold not set, then threshold from instance configuration is used.",
                                "name": "threshold"
                            }
                        ],
                        "description": "Return IP information and reputation",
                        "name": "ip",
                        "outputs": [
                            {
                                "contextPath": "DBotScore.Indicator",
                                "description": "The indicator that was tested.",
                                "type": "String"
                            },
                            {
                                "contextPath": "DBotScore.Score",
                                "description": "The actual score.",
                                "type": "Number"
                            },
                            {
                                "contextPath": "DBotScore.Type",
                                "description": "The indicator type.",
                                "type": "String"
                            },
                            {
                                "contextPath": "DBotScore.Vendor",
                                "description": "The vendor used to calculate the score.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.asn",
                                "description": "The autonomous system name for the IP address.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.asn_cidr",
                                "description": "The ASN CIDR.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.asn_country_code",
                                "description": "The ASN country code.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.asn_date",
                                "description": "The date on which the ASN was assigned.",
                                "type": "Date"
                            },
                            {
                                "contextPath": "HelloWorld.IP.asn_description",
                                "description": "The ASN description.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.asn_registry",
                                "description": "The registry the ASN belongs to.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.entities",
                                "description": "Entities associated to the IP.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.ip",
                                "description": "The actual IP address.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.network.cidr",
                                "description": "Network CIDR for the IP address.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.network.country",
                                "description": "The country of the IP address.",
                                "type": "Unknown"
                            },
                            {
                                "contextPath": "HelloWorld.IP.network.end_address",
                                "description": "The last IP address of the CIDR.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.network.events.action",
                                "description": "The action that happened on the event.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.network.events.actor",
                                "description": "The actor that performed the action on the event.",
                                "type": "Unknown"
                            },
                            {
                                "contextPath": "HelloWorld.IP.network.events.timestamp",
                                "description": "The timestamp when the event occurred.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.network.handle",
                                "description": "The handle of the network.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.network.ip_version",
                                "description": "The IP address version.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.network.links",
                                "description": "Links associated to the IP address.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.network.name",
                                "description": "The name of the network.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.network.notices.description",
                                "description": "The description of the notice.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.network.notices.links",
                                "description": "Links associated with the notice.",
                                "type": "Unknown"
                            },
                            {
                                "contextPath": "HelloWorld.IP.network.notices.title",
                                "description": "Title of the notice.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.network.parent_handle",
                                "description": "Handle of the parent network.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.network.raw",
                                "description": "Additional raw data for the network.",
                                "type": "Unknown"
                            },
                            {
                                "contextPath": "HelloWorld.IP.network.remarks",
                                "description": "Additional remarks for the network.",
                                "type": "Unknown"
                            },
                            {
                                "contextPath": "HelloWorld.IP.network.start_address",
                                "description": "The first IP address of the CIDR.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.network.status",
                                "description": "Status of the network.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.network.type",
                                "description": "The type of the network.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.query",
                                "description": "IP address that was queried.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.IP.raw",
                                "description": "Additional raw data for the IP address.",
                                "type": "Unknown"
                            },
                            {
                                "contextPath": "HelloWorld.IP.score",
                                "description": "Reputation score from HelloWorld for this IP (0 to 100, where higher is worse).",
                                "type": "Number"
                            },
                            {
                                "contextPath": "IP.Address",
                                "description": "IP address.",
                                "type": "String"
                            },
                            {
                                "contextPath": "IP.Malicious.Vendor",
                                "description": "The vendor reporting the IP address as malicious.",
                                "type": "String"
                            },
                            {
                                "contextPath": "IP.Malicious.Description",
                                "description": "A description explaining why the IP address was reported as malicious.",
                                "type": "String"
                            },
                            {
                                "contextPath": "IP.ASN",
                                "description": "The autonomous system name for the IP address.",
                                "type": "String"
                            },
                            {
                                "contextPath": "IP.Relationships.EntityA",
                                "description": "The source of the relationship.",
                                "type": "string"
                            },
                            {
                                "contextPath": "IP.Relationships.EntityB",
                                "description": "The destination of the relationship.",
                                "type": "string"
                            },
                            {
                                "contextPath": "IP.Relationships.Relationship",
                                "description": "The name of the relationship.",
                                "type": "string"
                            },
                            {
                                "contextPath": "IP.Relationships.EntityAType",
                                "description": "The type of the source of the relationship.",
                                "type": "string"
                            },
                            {
                                "contextPath": "IP.Relationships.EntityBType",
                                "description": "The type of the destination of the relationship.",
                                "type": "string"
                            }
                        ]
                    },
                    {
                        "arguments": [
                            {
                                "default": true,
                                "description": "List of Domains.",
                                "isArray": true,
                                "name": "domain"
                            },
                            {
                                "defaultValue": "65",
                                "description": "If the domain has reputation above the threshold then the domain defined as malicious. If threshold not set, then threshold from instance configuration is used.",
                                "name": "threshold"
                            }
                        ],
                        "description": "Returns Domain information and reputation.",
                        "name": "domain",
                        "outputs": [
                            {
                                "contextPath": "DBotScore.Indicator",
                                "description": "The indicator that was tested.",
                                "type": "String"
                            },
                            {
                                "contextPath": "DBotScore.Score",
                                "description": "The actual score.",
                                "type": "Number"
                            },
                            {
                                "contextPath": "DBotScore.Type",
                                "description": "The indicator type.",
                                "type": "String"
                            },
                            {
                                "contextPath": "DBotScore.Vendor",
                                "description": "The vendor used to calculate the score.",
                                "type": "String"
                            },
                            {
                                "contextPath": "Domain.Name",
                                "description": "The domain name.",
                                "type": "String"
                            },
                            {
                                "contextPath": "Domain.Malicious.Vendor",
                                "description": "The vendor reporting the domain as malicious.",
                                "type": "String"
                            },
                            {
                                "contextPath": "Domain.Malicious.Description",
                                "description": "A description explaining why the domain was reported as malicious.",
                                "type": "String"
                            },
                            {
                                "contextPath": "Domain.Registrant.Name",
                                "description": "The name of the registrant.",
                                "type": "String"
                            },
                            {
                                "contextPath": "Domain.Registrant.Country",
                                "description": "The country of the registrant.",
                                "type": "String"
                            },
                            {
                                "contextPath": "Domain.Organization",
                                "description": "The organization of the domain.",
                                "type": "String"
                            },
                            {
                                "contextPath": "Domain.CreationDate",
                                "description": "The creation date of the domain. Format is ISO8601 (i.e. '2020-04-30T10:35:00.000Z').",
                                "type": "Date"
                            },
                            {
                                "contextPath": "Domain.ExpirationDate",
                                "description": "The expiration date of the domain. Format is ISO8601 (i.e. '2020-04-30T10:35:00.000Z').",
                                "type": "Date"
                            },
                            {
                                "contextPath": "Domain.UpdatedDate",
                                "description": "The date when the domain was last updated. Format is ISO8601 (i.e. '2020-04-30T10:35:00.000Z').",
                                "type": "Date"
                            },
                            {
                                "contextPath": "Domain.NameServers",
                                "description": "Name servers of the domain.",
                                "type": "String"
                            },
                            {
                                "contextPath": "Domain.WHOIS.NameServers",
                                "description": "A CSV string of name servers, for example 'ns1.bla.com, ns2.bla.com'.",
                                "type": "String"
                            },
                            {
                                "contextPath": "Domain.WHOIS.CreationDate",
                                "description": "The creation date of the domain. Format is ISO8601 (i.e. '2020-04-30T10:35:00.000Z').",
                                "type": "Date"
                            },
                            {
                                "contextPath": "Domain.WHOIS.UpdatedDate",
                                "description": "The date when the domain was last updated. Format is ISO8601 (i.e. '2020-04-30T10:35:00.000Z').",
                                "type": "Date"
                            },
                            {
                                "contextPath": "Domain.WHOIS.ExpirationDate",
                                "description": "The expiration date of the domain.",
                                "type": "Date"
                            },
                            {
                                "contextPath": "Domain.WHOIS.Registrar.Name",
                                "description": "The name of the registrar, for example 'GoDaddy'",
                                "type": "String"
                            },
                            {
                                "contextPath": "IP.ASN",
                                "description": "The autonomous system name for the IP address.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Domain.address",
                                "description": "Domain admin address.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Domain.city",
                                "description": "Domain admin city.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Domain.country",
                                "description": "Domain admin country.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Domain.creation_date",
                                "description": "Domain creation date. Format is ISO8601.",
                                "type": "Date"
                            },
                            {
                                "contextPath": "HelloWorld.Domain.dnssec",
                                "description": "DNSSEC status.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Domain.domain",
                                "description": "The domain name.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Domain.domain_name",
                                "description": "Domain name options.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Domain.emails",
                                "description": "Contact emails.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Domain.expiration_date",
                                "description": "Expiration date. Format is ISO8601.",
                                "type": "Date"
                            },
                            {
                                "contextPath": "HelloWorld.Domain.name",
                                "description": "Domain admin name.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Domain.name_servers",
                                "description": "Name server.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Domain.org",
                                "description": "Domain organization.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Domain.referral_url",
                                "description": "Referral URL.",
                                "type": "Unknown"
                            },
                            {
                                "contextPath": "HelloWorld.Domain.registrar",
                                "description": "Domain registrar.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Domain.score",
                                "description": "Reputation score from HelloWorld for this domain (0 to 100, where higher is worse).",
                                "type": "Number"
                            },
                            {
                                "contextPath": "HelloWorld.Domain.state",
                                "description": "Domain admin state.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Domain.status",
                                "description": "Domain status.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Domain.updated_date",
                                "description": "Updated date. Format is ISO8601.",
                                "type": "Date"
                            },
                            {
                                "contextPath": "HelloWorld.Domain.whois_server",
                                "description": "WHOIS server.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Domain.zipcode",
                                "description": "Domain admin zipcode.",
                                "type": "Unknown"
                            }
                        ]
                    },
                    {
                        "arguments": [
                            {
                                "description": "Asset to start the scan against.",
                                "name": "hostname",
                                "required": true
                            }
                        ],
                        "description": "Start scan on an asset.",
                        "name": "helloworld-scan-start",
                        "outputs": [
                            {
                                "contextPath": "HelloWorld.Scan.scan_id",
                                "description": "Unique ID of the scan.",
                                "type": "string"
                            },
                            {
                                "contextPath": "HelloWorld.Scan.status",
                                "description": "Status of the scan ('RUNNING' or 'COMPLETE').",
                                "type": "string"
                            },
                            {
                                "contextPath": "HelloWorld.Scan.hostname",
                                "description": "The hostname the scan is run against.",
                                "type": "string"
                            }
                        ]
                    },
                    {
                        "arguments": [
                            {
                                "description": "List of Scan IDs. helloworld-scan-start returns \"scan_id\".",
                                "isArray": true,
                                "name": "scan_id",
                                "required": true
                            }
                        ],
                        "description": "Retrieve scan status for one or more scan IDs.",
                        "name": "helloworld-scan-status",
                        "outputs": [
                            {
                                "contextPath": "HelloWorld.Scan.scan_id",
                                "description": "Unique ID of the scan.",
                                "type": "string"
                            },
                            {
                                "contextPath": "HelloWorld.Scan.status",
                                "description": "Status of the scan ('RUNNING' or 'COMPLETE').",
                                "type": "string"
                            }
                        ]
                    },
                    {
                        "arguments": [
                            {
                                "auto": "PREDEFINED",
                                "defaultValue": "file",
                                "description": "Results format (file or JSON).",
                                "name": "format",
                                "predefined": [
                                    "json",
                                    "file"
                                ],
                                "required": true
                            },
                            {
                                "description": "Unique ID of the scan.",
                                "name": "scan_id",
                                "required": true
                            }
                        ],
                        "description": "Retrieve scan status in Context or as a File (default) for a Scan.",
                        "name": "helloworld-scan-results",
                        "outputs": [
                            {
                                "contextPath": "HelloWorld.Scan.entities.entity-id",
                                "description": "Scanned entity ID.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Scan.entities.ip_address",
                                "description": "Scanned entity IP address.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Scan.entities.type",
                                "description": "Scanned entity type.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Scan.entities.vulnerability_status",
                                "description": "Scanned entity vulnerability status.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Scan.entities.vulns",
                                "description": "Scanned entity CVE.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Scan.scan_id",
                                "description": "Unique ID of the scan.",
                                "type": "String"
                            },
                            {
                                "contextPath": "HelloWorld.Scan.status",
                                "description": "Status of the scan ('RUNNING' or 'COMPLETE').",
                                "type": "String"
                            },
                            {
                                "contextPath": "InfoFile.EntryID",
                                "description": "The EntryID of the report file.",
                                "type": "Unknown"
                            },
                            {
                                "contextPath": "InfoFile.Extension",
                                "description": "The extension of the report file.",
                                "type": "string"
                            },
                            {
                                "contextPath": "InfoFile.Name",
                                "description": "The name of the report file.",
                                "type": "string"
                            },
                            {
                                "contextPath": "InfoFile.Info",
                                "description": "The info of the report file.",
                                "type": "string"
                            },
                            {
                                "contextPath": "InfoFile.Size",
                                "description": "The size of the report file.",
                                "type": "number"
                            },
                            {
                                "contextPath": "InfoFile.Type",
                                "description": "The type of the report file.",
                                "type": "string"
                            },
                            {
                                "contextPath": "CVE.ID",
                                "description": "The ID of the CVE.",
                                "type": "string"
                            }
                        ]
                    }
                ],
                "dockerimage": "demisto/python3:3.10.5.31928",
                "isfetch": true,
                "runonce": false,
                "script": "register_module_line('HelloWorld', 'start', __line__())\n\"\"\"HelloWorld Integration for Cortex XSOAR (aka Demisto)\n\nThis integration is a good example on you can build a Cortex XSOAR Integration\nusing Python 3. Please follow the documentation links below and make sure that\nyour integration follows the Code Conventions and passes the Linting phase.\n\nDeveloper Documentation: https://xsoar.pan.dev/docs/welcome\nCode Conventions: https://xsoar.pan.dev/docs/integrations/code-conventions\nLinting: https://xsoar.pan.dev/docs/integrations/linting\n\nWhen building a Cortex XSOAR integration that is reusable, a lot of effort\nmust be placed in the design. We recommend to fill a Design Document template,\nthat allows you to capture Use Cases, Requirements and Inputs/Outputs.\n\nExample Design document for the this Integration (HelloWorld):\nhttps://docs.google.com/document/d/1wETtBEKg37PHNU8tYeB56M1LE314ux086z3HFeF_cX0\n\n\nHelloWorld API\n--------------\n\nThe HelloWorld API is a simple API that shows a realistic use case for an XSOAR\nintegration. It's actually a real API that is available to the following URL:\nhttps://soar.mastersofhack.com - if you need an API Key to test it out please\nreach out to your Cortex XSOAR contacts.\n\nThis API has a few basic functions:\n- Alerts: the endpoint returns mocked alerts and allows you to search based on\na number of parameters, such as state (ACTIVE or CLOSED), type, timestamp. It\ncan also return a single alert by ID. This is used to create new Incidents in\nXSOAR by using the ``fetch-incidents`` command, which is by default invoked\nevery minute.\nThere is also an endpoint that allows to retrieve additional details about a\nspecific alert by ID, and one to change the alert status to \"CLOSED\" once\nit has been resolved.\n\n- Reputation (ip and domain): these endpoints return, for an IP and\ndomain respectively, a WHOIS lookup of the entity as well as a reputation score\n(from 0 to 100) that is used to determine whether the entity is malicious. This\nendpoint is called by XSOAR reputation commands ``ip`` and ``domain`` that\nare run automatically every time an indicator is extracted in XSOAR. As a best\npractice of design, it is important to map and document the mapping between\na score in the original API format (0 to 100 in this case) to a score in XSOAR\nformat (0 to 3). This score is called ``DBotScore``, and is returned in the\ncontext to allow automated handling of indicators based on their reputation.\nMore information: https://xsoar.pan.dev/docs/integrations/dbot\n\n\n- Scan: to demonstrate how to run commands that are not returning instant data,\nthe API provides a scan endpoint that simulates scanning a host and generating\na report after the scan is completed. The API has endpoints to start a scan,\nwhich returns a job ID, poll for the scan status and, if the scan is completed,\nretrieved the job results.\nThis function is used in conjunction of the HelloWorld Scan playbook that uses\nthe GenericPolling mechanism to implement the job polling loop. The results\ncan be returned in JSON or attachment file format.\nInfo on GenericPolling: https://xsoar.pan.dev/docs/playbooks/generic-polling\n\nPlease check the HelloWorld Design Document referenced above for details about\nthe raw API responsens as well as the design details for this integration.\n\nThis integration also has a ``say-hello`` command for backward compatibility,\nthat doesn't connect to an API and just returns a ``Hello {name}`` string,\nwhere name is the input value provided.\n\n\nIntegration File Structure\n--------------------------\n\nAn integration usually consists of the following parts:\n- Imports\n- Constants\n- Client Class\n- Helper Functions\n- Command Functions\n- Main Function\n- Entry Point\n\n\nImports\n-------\n\nHere you can import Python module you need for your integration. If you need\na module that is not part of the default XSOAR Docker images, you can add\na custom one. More details: https://xsoar.pan.dev/docs/integrations/docker\n\nThere are also internal imports that are used by XSOAR:\n- demistomock (imported as demisto): allows your code to work offline for\ntesting. The actual ``demisto`` module is provided at runtime when the\ncode runs in XSOAR.\n- CommonServerPython.py: contains a set of helper functions, base classes\nand other useful components that will make your integration code easier\nto maintain.\n- CommonServerUserPython.py: includes a set of user defined commands that\nare specific to an XSOAR installation. Do not use it for integrations that\nare meant to be shared externally.\n\nThese imports are automatically loaded at runtime within the XSOAR script\nrunner, so you shouldn't modify them\n\nConstants\n---------\n\nUsually some constants that do not require user parameters or inputs, such\nas the default API entry point for your service, or the maximum numbers of\nincidents to fetch every time.\n\n\nClient Class\n------------\n\nWe recommend to use a Client class to wrap all the code that needs to interact\nwith your API. Moreover, we recommend, when possible, to inherit from the\nBaseClient class, defined in CommonServerPython.py. This class already handles\na lot of the work, such as system proxy settings, SSL certificate verification\nand exception handling for HTTP errors.\n\nNote that the Client class should NOT contain any Cortex XSOAR specific code,\ni.e. it shouldn't use anything in the ``demisto`` class (functions such as\n``demisto.args()`` or ``demisto.results()`` or even ``return_results`` and\n``return_error``.\nYou will use the Command Functions to handle XSOAR inputs and outputs.\n\nWhen calling an API, you should use the ``_http.request()`` method and you\ncan return the raw data to the calling function (usually a Command function).\n\nYou should usually have one function for each API endpoint.\n\nLook at the code and the commends of this specific class to better understand\nthe implementation details.\n\n\nHelper Functions\n----------------\n\nHelper functions are usually used as utility functions that are used by several\ncommand functions throughout your code. For example they map arguments to types\nor convert severity formats from integration-specific to XSOAR.\nMany helper functions are already defined in ``CommonServerPython.py`` and are\noften very handy.\n\n\nCommand Functions\n-----------------\n\nCommand functions perform the mapping between XSOAR inputs and outputs to the\nClient class functions inputs and outputs. As a best practice, they shouldn't\ncontain calls to ``demisto.args()``, ``demisto.results()``, ``return_error``\nand ``demisto.command()`` as those should be handled through the ``main()``\nfunction.\nHowever, in command functions, use ``demisto`` or ``CommonServerPython.py``\nartifacts, such as ``demisto.debug()`` or the ``CommandResults`` class and the\n``Common.*`` classes.\nUsually you will have one command function for every specific XSOAR command\nyou want to implement in your integration, plus ``test-module``,\n``fetch-incidents`` and ``fetch-indicators``(if the latter two are supported\nby your integration). Each command function should invoke one specific function\nof the Client class.\n\nCommand functions, when invoked through an XSOAR command usually return data\nusing the ``CommandResults`` class, that is then passed to ``return_results()``\nin the ``main()`` function.\n``return_results()`` is defined in ``CommonServerPython.py`` to return\nthe data to XSOAR. ``return_results()`` actually wraps ``demisto.results()``.\nYou should never use ``demisto.results()`` directly.\n\nSometimes you will need to return values in a format that is not compatible\nwith ``CommandResults`` (for example files): in that case you must return a\ndata structure that is then pass passed to ``return.results()``. (i.e.\ncheck the ``scan_results_command`` function in this file that has the option\nto return a file to Cortex XSOAR).\n\nIn any case you should never call ``return_results()`` directly from the\ncommand functions.\n\nWhen you use create the CommandResults object in command functions, you\nusually pass some types of data:\n\n- Human Readable: usually in Markdown format. This is what is presented to the\nanalyst in the War Room. You can use ``tableToMarkdown()``, defined in\n``CommonServerPython.py``, to convert lists and dicts in Markdown and pass it\nto ``return_results()`` using the ``readable_output`` argument, or the\n``return_results()`` function will call ``tableToMarkdown()`` automatically for\nyou.\n\n- Context Output: this is the machine readable data, JSON based, that XSOAR can\nparse and manage in the Playbooks or Incident's War Room. The Context Output\nfields should be defined in your integration YML file and is important during\nthe design phase. Make sure you define the format and follow best practices.\nYou can use ``demisto-sdk json-to-outputs`` to autogenerate the YML file\noutputs section. Context output is passed as the ``outputs`` argument in ``demisto_results()``,\nand the prefix (i.e. ``HelloWorld.Alert``) is passed via the ``outputs_prefix``\nargument.\n\nMore information on Context Outputs, Standards, DBotScore and demisto-sdk:\nhttps://xsoar.pan.dev/docs/integrations/code-conventions#outputs\nhttps://xsoar.pan.dev/docs/integrations/context-and-outputs\nhttps://xsoar.pan.dev/docs/integrations/context-standards\nhttps://xsoar.pan.dev/docs/integrations/dbot\nhttps://github.com/demisto/demisto-sdk/blob/master/demisto_sdk/commands/json_to_outputs/README.md\n\nAlso, when you write data in the Context, you want to make sure that if you\nreturn updated information for an entity, to update it and not append to\nthe list of entities (i.e. in HelloWorld you want to update the status of an\nexisting ``HelloWorld.Alert`` in the context when you retrieve it, rather than\nadding a new one if you already retrieved it). To update data in the Context,\nyou can define which is the key attribute to use, such as (using the example):\n``outputs_key_field='alert_id'``. This means that you are using the ``alert_id``\nkey to determine whether adding a new entry in the context or updating an\nexisting one that has the same ID. You can look at the examples to understand\nhow it works.\nMore information here:\nhttps://xsoar.pan.dev/docs/integrations/context-and-outputs\nhttps://xsoar.pan.dev/docs/integrations/code-conventions#outputs\nhttps://xsoar.pan.dev/docs/integrations/dt\n\n- Raw Output: this is usually the raw result from your API and is used for\ntroubleshooting purposes or for invoking your command from Automation Scripts.\nIf not specified, ``return_results()`` will use the same data as ``outputs``.\n\n\nMain Function\n-------------\n\nThe ``main()`` function takes care of reading the integration parameters via\nthe ``demisto.params()`` function, initializes the Client class and checks the\ndifferent options provided to ``demisto.commands()``, to invoke the correct\ncommand function passing to it ``demisto.args()`` and returning the data to\n``return_results()``. If implemented, ``main()`` also invokes the function\n``fetch_incidents()``with the right parameters and passes the outputs to the\n``demisto.incidents()`` function. ``main()`` also catches exceptions and\nreturns an error message via ``return_error()``.\n\n\nEntry Point\n-----------\n\nThis is the integration code entry point. It checks whether the ``__name__``\nvariable is ``__main__`` , ``__builtin__`` (for Python 2) or ``builtins`` (for\nPython 3) and then calls the ``main()`` function. Just keep this convention.\n\n\"\"\"\n\n\n\n\nimport json\nimport urllib3\nimport dateparser\nfrom typing import Any, Dict, Tuple, List, Optional, Union, cast\n\n# Disable insecure warnings\nurllib3.disable_warnings()\n\n''' CONSTANTS '''\n\nDATE_FORMAT = '%Y-%m-%dT%H:%M:%SZ'\nMAX_INCIDENTS_TO_FETCH = 50\nDEFAULT_INDICATORS_THRESHOLD = 65\nHELLOWORLD_SEVERITIES = ['Low', 'Medium', 'High', 'Critical']\n\n''' CLIENT CLASS '''\n\n\nclass Client(BaseClient):\n    \"\"\"Client class to interact with the service API\n\n    This Client implements API calls, and does not contain any Demisto logic.\n    Should only do requests and return data.\n    It inherits from BaseClient defined in CommonServer Python.\n    Most calls use _http_request() that handles proxy, SSL verification, etc.\n    For this HelloWorld implementation, no special attributes defined\n    \"\"\"\n\n    def get_ip_reputation(self, ip: str) -> Dict[str, Any]:\n        \"\"\"Gets the IP reputation using the '/ip' API endpoint\n\n        Args:\n            ip (str): IP address to get the reputation for.\n\n        Returns:\n            dict: dict containing the IP reputation as returned from the API\n        \"\"\"\n\n        return self._http_request(\n            method='GET',\n            url_suffix='/ip',\n            params={\n                'ip': ip\n            }\n        )\n\n    def get_domain_reputation(self, domain: str) -> Dict[str, Any]:\n        \"\"\"\n        Gets the Domain reputation using the '/domain' API endpoint.\n\n        Args:\n            domain (str): Domain name to get the reputation for.\n\n        Returns:\n            dict: dict containing the domain reputation as returned from the API.\n        \"\"\"\n\n        return self._http_request(\n            method='GET',\n            url_suffix='/domain',\n            params={\n                'domain': domain\n            }\n        )\n\n    def search_alerts(self, alert_status: Optional[str], severity: Optional[str],\n                      alert_type: Optional[str], max_results: Optional[int],\n                      start_time: Optional[int]) -> List[Dict[str, Any]]:\n        \"\"\"\n        Searches for HelloWorld alerts using the '/get_alerts' API endpoint.\n        All the parameters are passed directly to the API as HTTP POST parameters in the request\n\n        Args:\n            alert_status (str): status of the alert to search for. Options are: 'ACTIVE' or 'CLOSED'\n            severity (str): severity of the alert to search for. Comma-separated values. Options are: \"Low\", \"Medium\",\n                \"High\", \"Critical\".\n            alert_type (str): type of alerts to search for. There is no list of predefined types.\n            max_results (int): maximum number of results to return.\n            start_time (int): start timestamp (epoch in seconds) for the alert search.\n\n        Returns:\n            list: list of HelloWorld alerts as dicts.\n        \"\"\"\n\n        request_params: Dict[str, Any] = {}\n\n        if alert_status:\n            request_params['alert_status'] = alert_status\n\n        if alert_type:\n            request_params['alert_type'] = alert_type\n\n        if severity:\n            request_params['severity'] = severity\n\n        if max_results:\n            request_params['max_results'] = max_results\n\n        if start_time:\n            request_params['start_time'] = start_time\n\n        return self._http_request(\n            method='GET',\n            url_suffix='/get_alerts',\n            params=request_params\n        )\n\n    def get_alert(self, alert_id: str) -> Dict[str, Any]:\n        \"\"\"\n        Gets a specific HelloWorld alert by id.\n\n        Args:\n            alert_id (str): ID of the alert to return.\n\n        Returns:\n            dict: dict containing the alert as returned from the API.\n        \"\"\"\n\n        return self._http_request(\n            method='GET',\n            url_suffix='/get_alert_details',\n            params={\n                'alert_id': alert_id\n            }\n        )\n\n    def update_alert_status(self, alert_id: str, alert_status: str) -> Dict[str, Any]:\n        \"\"\"\n        Changes the status of a specific HelloWorld alert.\n\n        Args:\n            alert_id (str): ID of the alert to return.\n            alert_status (str): new alert status. Options are: 'ACTIVE' or 'CLOSED'.\n\n        Returns:\n            dict: dict containing the scan status as returned from the API.\n        \"\"\"\n\n        return self._http_request(\n            method='GET',\n            url_suffix='/change_alert_status',\n            params={\n                'alert_id': alert_id,\n                'alert_status': alert_status\n            }\n        )\n\n    def scan_start(self, hostname: str) -> Dict[str, Any]:\n        \"\"\"\n        Starts a HelloWorld scan on a specific hostname.\n\n        Args:\n            hostname (str): hostname of the machine to scan.\n\n        Returns:\n            dict: dict containing the scan status as returned from the API.\n        \"\"\"\n\n        return self._http_request(\n            method='GET',\n            url_suffix='/start_scan',\n            params={\n                'hostname': hostname\n            }\n        )\n\n    def scan_status(self, scan_id: str) -> Dict[str, Any]:\n        \"\"\"\n        Gets the status of a HelloWorld scan.\n\n        Args:\n            scan_id (str): ID of the scan to retrieve results for.\n\n        Returns:\n            dict: dict containing the scan status as returned from the API.\n        \"\"\"\n\n        return self._http_request(\n            method='GET',\n            url_suffix='/check_scan',\n            params={\n                'scan_id': scan_id\n            }\n        )\n\n    def scan_results(self, scan_id: str) -> Dict[str, Any]:\n        \"\"\"Gets the results of a HelloWorld scan\n\n        Args:\n            scan_id (str): ID of the scan to retrieve results for.\n\n        Returns:\n            dict: dict containing the scan results as returned from the API.\n        \"\"\"\n\n        return self._http_request(\n            method='GET',\n            url_suffix='/get_scan_results',\n            params={\n                'scan_id': scan_id\n            }\n        )\n\n    def say_hello(self, name: str) -> str:\n        \"\"\"\n        Returns a string: 'Hello {name}'\n\n        Args:\n            name (str): name to append to the 'Hello' string.\n\n        Returns:\n            str: string containing 'Hello {name}'\n        \"\"\"\n\n        return f'Hello {name}'\n\n\n''' HELPER FUNCTIONS '''\n\n\ndef parse_domain_date(domain_date: Union[List[str], str], date_format: str = '%Y-%m-%dT%H:%M:%S.000Z') -> Optional[str]:\n    \"\"\"\n    Converts whois date format to an ISO8601 string.\n    Converts the HelloWorld domain WHOIS date (YYYY-mm-dd HH:MM:SS) format\n    in a datetime. If a list is returned with multiple elements, takes only\n    the first one.\n\n    Args:\n        domain_date (str/list): a string or list of strings with the format 'YYYY-mm-DD HH:MM:SS'\n        date_format (int): The format date to which the function will convert the given date.\n\n    Returns:\n        str: Parsed time, default in ISO8601 format.\n    \"\"\"\n\n    if isinstance(domain_date, str):\n        # if str parse the value\n        domain_date_dt = dateparser.parse(domain_date)\n        if domain_date_dt:\n            return domain_date_dt.strftime(date_format)\n    elif isinstance(domain_date, list) and len(domain_date) > 0 and isinstance(domain_date[0], str):\n        # if list with at least one element, parse the first element\n        domain_date_dt = dateparser.parse(domain_date[0])\n        if domain_date_dt:\n            return domain_date_dt.strftime(date_format)\n    # in any other case return nothing\n    return None\n\n\ndef convert_to_demisto_severity(severity: str) -> int:\n    \"\"\"\n    Maps HelloWorld severity to Cortex XSOAR severity.\n    Converts the HelloWorld alert severity level ('Low', 'Medium', 'High', 'Critical') to Cortex XSOAR incident\n    severity (1 to 4).\n\n    Args:\n        severity (str): severity as returned from the HelloWorld API.\n        first_fetch_time (int): The first fetch time as configured in the integration params.\n\n    Returns:\n        int: Cortex XSOAR Severity (1 to 4)\n    \"\"\"\n\n    # In this case the mapping is straightforward, but more complex mappings\n    # might be required in your integration, so a dedicated function is\n    # recommended. This mapping should also be documented.\n    return {\n        'Low': IncidentSeverity.LOW,\n        'Medium': IncidentSeverity.MEDIUM,\n        'High': IncidentSeverity.HIGH,\n        'Critical': IncidentSeverity.CRITICAL\n    }[severity]\n\n\n''' COMMAND FUNCTIONS '''\n\n\ndef test_module(client: Client, params: Dict[str, Any], first_fetch_time: int) -> str:\n    \"\"\"\n    Tests API connectivity and authentication'\n    When 'ok' is returned it indicates the integration works like it is supposed to and connection to the service is\n    successful.\n    Raises exceptions if something goes wrong.\n\n    Args:\n        client (Client): HelloWorld client to use.\n        params (Dict): Integration parameters.\n        first_fetch_time (int): The first fetch time as configured in the integration params.\n\n    Returns:\n        str: 'ok' if test passed, anything else will raise an exception and will fail the test.\n    \"\"\"\n\n    # INTEGRATION DEVELOPER TIP\n    # Client class should raise the exceptions, but if the test fails\n    # the exception text is printed to the Cortex XSOAR UI.\n    # If you have some specific errors you want to capture (i.e. auth failure)\n    # you should catch the exception here and return a string with a more\n    # readable output (for example return 'Authentication Error, API Key\n    # invalid').\n    # Cortex XSOAR will print everything you return different than 'ok' as\n    # an error\n    try:\n        if params.get('isFetch'):  # Tests fetch incident:\n            alert_status = params.get('alert_status', None)\n            alert_type = params.get('alert_type', None)\n            min_severity = params.get('min_severity', None)\n\n            fetch_incidents(\n                client=client,\n                max_results=1,\n                last_run={},\n                first_fetch_time=first_fetch_time,\n                alert_status=alert_status,\n                min_severity=min_severity,\n                alert_type=alert_type\n            )\n        else:\n            client.search_alerts(max_results=1, start_time=first_fetch_time, alert_status=None, alert_type=None,\n                                 severity=None)\n\n    except DemistoException as e:\n        if 'Forbidden' in str(e):\n            return 'Authorization Error: make sure API Key is correctly set'\n        else:\n            raise e\n\n    return 'ok'\n\n\ndef say_hello_command(client: Client, args: Dict[str, Any]) -> CommandResults:\n    \"\"\"\n    helloworld-say-hello command: Returns Hello {somename}\n\n    Args:\n        client (Client): HelloWorld client to use.\n        args (dict): all command arguments, usually passed from ``demisto.args()``.\n            ``args['name']`` is used as input name.\n\n    Returns:\n        CommandResults: A ``CommandResults`` object that is then passed to ``return_results``, that hello world message.\n    \"\"\"\n\n    # INTEGRATION DEVELOPER TIP\n    # In this case 'name' is an argument set in the HelloWorld.yml file as mandatory,\n    # so the null check here as XSOAR will always check it before your code is called.\n    # Although it's not mandatory to check, you are welcome to do so.\n\n    name = args.get('name', None)\n    if not name:\n        raise ValueError('name not specified')\n\n    # Call the Client function and get the raw response\n    result = client.say_hello(name)\n\n    # Create the human readable output.\n    # It will  be in markdown format - https://www.markdownguide.org/basic-syntax/\n    # More complex output can be formatted using ``tableToMarkDown()`` defined\n    # in ``CommonServerPython.py``\n    readable_output = f'## {result}'\n\n    # More information about Context:\n    # https://xsoar.pan.dev/docs/integrations/context-and-outputs\n    # We return a ``CommandResults`` object, and we want to pass a custom\n    # markdown here, so the argument ``readable_output`` is explicit. If not\n    # passed, ``CommandResults``` will do a ``tableToMarkdown()`` do the data\n    # to generate the readable output.\n    return CommandResults(\n        readable_output=readable_output,\n        outputs_prefix='hello',\n        outputs_key_field='',\n        outputs=result\n    )\n\n\ndef fetch_incidents(client: Client, max_results: int, last_run: Dict[str, int],\n                    first_fetch_time: Optional[int], alert_status: Optional[str],\n                    min_severity: str, alert_type: Optional[str]\n                    ) -> Tuple[Dict[str, int], List[dict]]:\n    \"\"\"\n    This function retrieves new alerts every interval (default is 1 minute).\n    It has to implement the logic of making sure that incidents are fetched only onces and no incidents are missed.\n    By default it's invoked by XSOAR every minute. It will use last_run to save the timestamp of the last incident it\n    processed. If last_run is not provided, it should use the integration parameter first_fetch_time to determine when\n    to start fetching the first time.\n\n    Args:\n        client (Client): HelloWorld client to use.\n        max_results (int): Maximum numbers of incidents per fetch.\n        last_run (dict): A dict with a key containing the latest incident created time we got from last fetch.\n        first_fetch_time(int): If last_run is None (first time we are fetching), it contains the timestamp in\n            milliseconds on when to start fetching incidents.\n        alert_status (str): status of the alert to search for. Options are: 'ACTIVE' or 'CLOSED'.\n        min_severity (str): minimum severity of the alert to search for. Options are: \"Low\", \"Medium\", \"High\" and\n            \"Critical\".\n        alert_type (str): type of alerts to search for. There is no list of predefined types.\n    Returns:\n        dict: Next run dictionary containing the timestamp that will be used in ``last_run`` on the next fetch.\n        list: List of incidents that will be created in XSOAR.\n    \"\"\"\n\n    # Get the last fetch time, if exists\n    # last_run is a dict with a single key, called last_fetch\n    last_fetch = last_run.get('last_fetch', None)\n    # Handle first fetch time\n    if last_fetch is None:\n        # if missing, use what provided via first_fetch_time\n        last_fetch = first_fetch_time\n    else:\n        # otherwise use the stored last fetch\n        last_fetch = int(last_fetch)\n\n    # for type checking, making sure that latest_created_time is int\n    latest_created_time = cast(int, last_fetch)\n\n    # Initialize an empty list of incidents to return\n    # Each incident is a dict with a string as a key\n    incidents: List[Dict[str, Any]] = []\n\n    # Get the CSV list of severities from min_severity\n    severity = ','.join(HELLOWORLD_SEVERITIES[HELLOWORLD_SEVERITIES.index(min_severity):])\n\n    alerts = client.search_alerts(\n        alert_type=alert_type,\n        alert_status=alert_status,\n        max_results=max_results,\n        start_time=last_fetch,\n        severity=severity\n    )\n\n    for alert in alerts:\n        # If no created_time set is as epoch (0). We use time in ms so we must\n        # convert it from the HelloWorld API response\n        incident_created_time = int(alert.get('created', '0'))\n        incident_created_time_ms = incident_created_time * 1000\n\n        # to prevent duplicates, we are only adding incidents with creation_time > last fetched incident\n        if last_fetch:\n            if incident_created_time <= last_fetch:\n                continue\n\n        # If no name is present it will throw an exception\n        incident_name = alert['name']\n\n        # INTEGRATION DEVELOPER TIP\n        # The incident dict is initialized with a few mandatory fields:\n        # name: the incident name\n        # occurred: the time on when the incident occurred, in ISO8601 format\n        # we use timestamp_to_datestring() from CommonServerPython.py to\n        # handle the conversion.\n        # rawJSON: everything else is packed in a string via json.dumps()\n        # and is included in rawJSON. It will be used later for classification\n        # and mapping inside XSOAR.\n        # severity: it's not mandatory, but is recommended. It must be\n        # converted to XSOAR specific severity (int 1 to 4)\n        # Note that there are other fields commented out here. You can do some\n        # mapping of fields (either out of the box fields, like \"details\" and\n        # \"type\") or custom fields (like \"helloworldid\") directly here in the\n        # code, or they can be handled in the classification and mapping phase.\n        # In either case customers can override them. We leave the values\n        # commented out here, but you can use them if you want.\n        incident = {\n            'name': incident_name,\n            # 'details': alert['name'],\n            'occurred': timestamp_to_datestring(incident_created_time_ms),\n            'rawJSON': json.dumps(alert),\n            # 'type': 'Hello World Alert',  # Map to a specific XSOAR incident Type\n            'severity': convert_to_demisto_severity(alert.get('severity', 'Low')),\n            # 'CustomFields': {  # Map specific XSOAR Custom Fields\n            #     'helloworldid': alert.get('alert_id'),\n            #     'helloworldstatus': alert.get('alert_status'),\n            #     'helloworldtype': alert.get('alert_type')\n            # }\n        }\n\n        incidents.append(incident)\n\n        # Update last run and add incident if the incident is newer than last fetch\n        if incident_created_time > latest_created_time:\n            latest_created_time = incident_created_time\n\n    # Save the next_run as a dict with the last_fetch key to be stored\n    next_run = {'last_fetch': latest_created_time}\n    return next_run, incidents\n\n\ndef ip_reputation_command(client: Client, args: Dict[str, Any], default_threshold: int,\n                          reliability: DBotScoreReliability) -> List[CommandResults]:\n    \"\"\"\n    ip command: Returns IP reputation for a list of IPs\n\n    Args:\n        client (Client): HelloWorld client to use.\n        args (dict): all command arguments, usually passed from ``demisto.args()``.\n            ``args['ip']`` is a list of IPs or a single IP.\n            ``args['threshold']`` threshold to determine whether an IP is malicious.\n        default_threshold (int): default threshold to determine whether an IP is malicious if threshold is not\n            specified in the XSOAR arguments.\n        reliability (DBotScoreReliability): reliability of the source providing the intelligence data.\n\n    Returns:\n        CommandResults: A ``CommandResults`` object that is then passed to ``return_results``, that contains IPs.\n    \"\"\"\n\n    # INTEGRATION DEVELOPER TIP\n    # Reputation commands usually support multiple inputs (i.e. arrays), so\n    # they can be invoked once in XSOAR. In this case the API supports a single\n    # IP at a time, so we will cycle this for all the members of the array.\n    # We use argToList(), implemented in CommonServerPython.py to automatically\n    # return a list of a single element even if the provided input is a scalar.\n\n    ips = argToList(args.get('ip'))\n    if len(ips) == 0:\n        raise ValueError('IP(s) not specified')\n\n    # It's a good practice to document the threshold you use to determine\n    # if a score is malicious in your integration documentation.\n    # Thresholds should also be possible to override, as in this case,\n    # where threshold is an actual argument of the command.\n    threshold = int(args.get('threshold', default_threshold))\n\n    # Initialize an empty list of CommandResults to return\n    # each CommandResult will contain context standard for IP\n    command_results: List[CommandResults] = []\n\n    for ip in ips:\n        if not is_ip_valid(ip, accept_v6_ips=True):  # check IP's validity\n            raise ValueError(f'IP \"{ip}\" is not valid')\n        ip_data = client.get_ip_reputation(ip)\n        ip_data['ip'] = ip\n\n        # This is an example of creating relationships in reputation commands.\n        # We will create relationships between indicators only in case that the API returns information about\n        # the relationship between two indicators.\n        # See https://xsoar.pan.dev/docs/integrations/generic-commands-reputation#relationships\n\n        relationships_list = []\n        links = ip_data.get('network', {}).get('links', [])\n        for link in links:\n            relationships_list.append(EntityRelationship(\n                entity_a=ip,\n                entity_a_type=FeedIndicatorType.IP,\n                name='related-to',\n                entity_b=link,\n                entity_b_type=FeedIndicatorType.URL,\n                brand='HelloWorld'))\n\n        # HelloWorld score to XSOAR reputation mapping\n        # See: https://xsoar.pan.dev/docs/integrations/dbot\n        # We are using Common.DBotScore as macros to simplify\n        # the mapping.\n\n        reputation = int(ip_data.get('score', 0))\n        if reputation == 0:\n            score = Common.DBotScore.NONE  # unknown\n        elif reputation >= threshold:\n            score = Common.DBotScore.BAD  # bad\n        elif reputation >= threshold / 2:\n            score = Common.DBotScore.SUSPICIOUS  # suspicious\n        else:\n            score = Common.DBotScore.GOOD  # good\n\n        # The context is bigger here than other commands, as it consists in 3\n        # parts: the vendor-specific context (HelloWorld), the standard-context\n        # (IP) and the DBotScore.\n        # More information:\n        # https://xsoar.pan.dev/docs/integrations/context-and-outputs\n        # https://xsoar.pan.dev/docs/integrations/context-standards\n        # https://xsoar.pan.dev/docs/integrations/dbot\n        # Also check the HelloWorld Design Document\n\n        # Create the DBotScore structure first using the Common.DBotScore class.\n        dbot_score = Common.DBotScore(\n            indicator=ip,\n            indicator_type=DBotScoreType.IP,\n            integration_name='HelloWorld',\n            score=score,\n            malicious_description=f'Hello World returned reputation {reputation}',\n            reliability=reliability\n        )\n\n        # Create the IP Standard Context structure using Common.IP and add\n        # dbot_score to it.\n        ip_standard_context = Common.IP(\n            ip=ip,\n            asn=ip_data.get('asn'),\n            dbot_score=dbot_score,\n            relationships=relationships_list\n        )\n\n        # INTEGRATION DEVELOPER TIP\n        # In the integration specific Context output (HelloWorld.IP) in this\n        # example you want to provide a lot of information as it can be used\n        # programmatically from within Cortex XSOAR in playbooks and commands.\n        # On the other hand, this API is way to verbose, so we want to select\n        # only certain keys to be returned in order not to clog the context\n        # with useless information. What to actually return in the context and\n        # to define as a command output is subject to design considerations.\n\n        # INTEGRATION DEVELOPER TIP\n        # To generate the Context Outputs on the YML use ``demisto-sdk``'s\n        # ``json-to-outputs`` option.\n\n        # Define which fields we want to exclude from the context output as\n        # they are too verbose.\n        ip_context_excluded_fields = ['objects', 'nir']\n        ip_data = {k: ip_data[k] for k in ip_data if k not in ip_context_excluded_fields}\n\n        # In this case we want to use an custom markdown to specify the table title,\n        # but otherwise ``CommandResults()`` will call ``tableToMarkdown()``\n        #  automatically\n        readable_output = tableToMarkdown('IP', ip_data)\n\n        # INTEGRATION DEVELOPER TIP\n        # The output key will be ``HelloWorld.IP``, using ``ip`` as the key field.\n        # ``indicator`` is used to provide the context standard (IP)\n        command_results.append(CommandResults(\n            readable_output=readable_output,\n            outputs_prefix='HelloWorld.IP',\n            outputs_key_field='ip',\n            outputs=ip_data,\n            indicator=ip_standard_context,\n            relationships=relationships_list\n        ))\n    return command_results\n\n\ndef domain_reputation_command(client: Client, args: Dict[str, Any], default_threshold: int,\n                              reliability: DBotScoreReliability) -> List[CommandResults]:\n    \"\"\"\n    domain command: Returns domain reputation for a list of domains.\n\n    Args:\n        client (Client): HelloWorld client to use.\n        args (dict): all command arguments, usually passed from ``demisto.args()``.\n            ``args['domain']`` list of domains or a single domain.\n            ``args['threshold']`` threshold to determine whether a domain is malicious.\n        default_threshold (int): default threshold to determine whether a domain is malicious if threshold is not\n            specified in the XSOAR arguments.\n        reliability (DBotScoreReliability): reliability of the source providing the intelligence data.\n\n    Returns:\n        CommandResults: A ``CommandResults`` object that is then passed to ``return_results``, that contains Domains.\n    \"\"\"\n\n    # INTEGRATION DEVELOPER TIP\n    # Reputation commands usually support multiple inputs (i.e. arrays), so\n    # they can be invoked once in XSOAR. In this case the API supports a single\n    # IP at a time, so we will cycle this for all the members of the array.\n    # We use argToList(), implemented in CommonServerPython.py to automatically\n    # return a list of a single element even if the provided input is a scalar.\n\n    domains = argToList(args.get('domain'))\n    if len(domains) == 0:\n        raise ValueError('domain(s) not specified')\n\n    threshold = int(args.get('threshold', default_threshold))\n\n    # Initialize an empty list of CommandResults to return,\n    # each CommandResult will contain context standard for Domain\n    command_results: List[CommandResults] = []\n\n    for domain in domains:\n        domain_data = client.get_domain_reputation(domain)\n        domain_data['domain'] = domain\n\n        # INTEGRATION DEVELOPER TIP\n        # We want to convert the dates to ISO8601 as\n        # Cortex XSOAR customers and integrations use this format by default\n        if 'creation_date' in domain_data:\n            domain_data['creation_date'] = parse_domain_date(domain_data['creation_date'])\n        if 'expiration_date' in domain_data:\n            domain_data['expiration_date'] = parse_domain_date(domain_data['expiration_date'])\n        if 'updated_date' in domain_data:\n            domain_data['updated_date'] = parse_domain_date(domain_data['updated_date'])\n\n        # HelloWorld score to XSOAR reputation mapping\n        # See: https://xsoar.pan.dev/docs/integrations/dbot\n        # We are using Common.DBotScore as macros to simplify\n        # the mapping.\n\n        score = 0\n        reputation = int(domain_data.get('score', 0))\n        if reputation == 0:\n            score = Common.DBotScore.NONE  # unknown\n        elif reputation >= threshold:\n            score = Common.DBotScore.BAD  # bad\n        elif reputation >= threshold / 2:\n            score = Common.DBotScore.SUSPICIOUS  # suspicious\n        else:\n            score = Common.DBotScore.GOOD  # good\n\n        # INTEGRATION DEVELOPER TIP\n        # The context is bigger here than other commands, as it consists in 3\n        # parts: the vendor-specific context (HelloWorld), the standard-context\n        # (Domain) and the DBotScore.\n        # More information:\n        # https://xsoar.pan.dev/docs/integrations/context-and-outputs\n        # https://xsoar.pan.dev/docs/integrations/context-standards\n        # https://xsoar.pan.dev/docs/integrations/dbot\n        # Also check the sample Design Document\n\n        dbot_score = Common.DBotScore(\n            indicator=domain,\n            integration_name='HelloWorld',\n            indicator_type=DBotScoreType.DOMAIN,\n            score=score,\n            malicious_description=f'Hello World returned reputation {reputation}',\n            reliability=reliability\n        )\n\n        # Create the Domain Standard Context structure using Common.Domain and\n        # add dbot_score to it.\n        domain_standard_context = Common.Domain(\n            domain=domain,\n            creation_date=domain_data.get('creation_date', None),\n            expiration_date=domain_data.get('expiration_date', None),\n            updated_date=domain_data.get('updated_date', None),\n            organization=domain_data.get('org', None),\n            name_servers=domain_data.get('name_servers', None),\n            registrant_name=domain_data.get('name', None),\n            registrant_country=domain_data.get('country', None),\n            registrar_name=domain_data.get('registrar', None),\n            dbot_score=dbot_score\n        )\n\n        # In this case we want to use an custom markdown to specify the table title,\n        # but otherwise ``CommandResults()`` will call ``tableToMarkdown()``\n        #  automatically\n        readable_output = tableToMarkdown('Domain', domain_data)\n\n        # INTEGRATION DEVELOPER TIP\n        # The output key will be ``HelloWorld.Domain``, using ``domain`` as the key\n        # field.\n        # ``indicator`` is used to provide the context standard (Domain)\n        command_results.append(CommandResults(\n            readable_output=readable_output,\n            outputs_prefix='HelloWorld.Domain',\n            outputs_key_field='domain',\n            outputs=domain_data,\n            indicator=domain_standard_context\n        ))\n    return command_results\n\n\ndef search_alerts_command(client: Client, args: Dict[str, Any]) -> CommandResults:\n    \"\"\"\n    helloworld-search-alerts command: Search alerts in HelloWorld\n\n    Args:\n        client (Client): HelloWorld client to use.\n        args (dict): all command arguments, usually passed from ``demisto.args()``.\n            ``args['status']`` alert status. Options are 'ACTIVE' or 'CLOSED'.\n            ``args['severity']`` alert severity CSV.\n            ``args['alert_type']`` alert type.\n            ``args['start_time']``  start time as ISO8601 date or seconds since epoch.\n            ``args['max_results']`` maximum number of results to return.\n\n    Returns:\n        CommandResults: A ``CommandResults`` object that is then passed to ``return_results``, that contains an alerts.\n    \"\"\"\n\n    status = args.get('status')\n\n    # Check if severity contains allowed values, use all if default\n    severities: List[str] = HELLOWORLD_SEVERITIES\n    severity = args.get('severity', None)\n    if severity:\n        severities = severity.split(',')\n        if not all(s in HELLOWORLD_SEVERITIES for s in severities):\n            raise ValueError(\n                f'severity must be a comma-separated value '\n                f'with the following options: {\",\".join(HELLOWORLD_SEVERITIES)}')\n\n    alert_type = args.get('alert_type')\n\n    # Convert the argument to a timestamp using helper function\n    start_time = arg_to_datetime(\n        arg=args.get('start_time'),\n        arg_name='start_time',\n        required=False\n    )\n\n    # Convert the argument to an int using helper function\n    max_results = arg_to_number(\n        arg=args.get('max_results'),\n        arg_name='max_results',\n        required=False\n    )\n\n    # Severity is passed to the API as a CSV\n    alerts = client.search_alerts(\n        severity=','.join(severities),\n        alert_status=status,\n        alert_type=alert_type,\n        start_time=int(start_time.timestamp()) if start_time else None,\n        max_results=max_results\n    )\n\n    # INTEGRATION DEVELOPER TIP\n    # We want to convert the \"created\" time from timestamp(s) to ISO8601 as\n    # Cortex XSOAR customers and integrations use this format by default\n    for alert in alerts:\n        if 'created' not in alert:\n            continue\n        created_time_ms = int(alert.get('created', '0')) * 1000\n        alert['created'] = timestamp_to_datestring(created_time_ms)\n\n    # in this example we are not providing a custom markdown, we will\n    # let ``CommandResults`` generate it by default.\n    return CommandResults(\n        outputs_prefix='HelloWorld.Alert',\n        outputs_key_field='alert_id',\n        outputs=alerts\n    )\n\n\ndef get_alert_command(client: Client, args: Dict[str, Any]) -> CommandResults:\n    \"\"\"\n    helloworld-get-alert command: Returns a HelloWorld alert.\n\n    Args:\n        client (Client): HelloWorld client to use.\n        args (dict): all command arguments, usually passed from ``demisto.args()``.\n            `args['alert_id']`` alert ID to return.\n\n    Returns:\n        CommandResults: A ``CommandResults`` object that is then passed to ``return_results``, that contains an alert.\n    \"\"\"\n\n    alert_id = args.get('alert_id', None)\n    if not alert_id:\n        raise ValueError('alert_id not specified')\n\n    alert = client.get_alert(alert_id=alert_id)\n\n    # INTEGRATION DEVELOPER TIP\n    # We want to convert the \"created\" time from timestamp(s) to ISO8601 as\n    # Cortex XSOAR customers and integrations use this format by default\n    if 'created' in alert:\n        created_time_ms = int(alert.get('created', '0')) * 1000\n        alert['created'] = timestamp_to_datestring(created_time_ms)\n\n    # tableToMarkdown() is defined is CommonServerPython.py and is used very\n    # often to convert lists and dicts into a human readable format in markdown\n    readable_output = tableToMarkdown(f'HelloWorld Alert {alert_id}', alert)\n\n    return CommandResults(\n        readable_output=readable_output,\n        outputs_prefix='HelloWorld.Alert',\n        outputs_key_field='alert_id',\n        outputs=alert\n    )\n\n\ndef update_alert_status_command(client: Client, args: Dict[str, Any]) -> CommandResults:\n    \"\"\"\n    helloworld-update-alert-status command: Changes the status of an alert.\n    Changes the status of a HelloWorld alert and returns the updated alert info\n\n    Args:\n        client (Client): HelloWorld client to use.\n        args (dict): all command arguments, usually passed from ``demisto.args()``.\n            ``args['alert_id']`` alert ID to update.\n            ``args['status']`` new status, either ACTIVE or CLOSED.\n\n\n    Returns:\n        CommandResults: A ``CommandResults`` object that is then passed to ``return_results``, that contains an updated\n            alert.\n    \"\"\"\n\n    alert_id = args.get('alert_id', None)\n    if not alert_id:\n        raise ValueError('alert_id not specified')\n\n    status = args.get('status', None)\n    if status not in ('ACTIVE', 'CLOSED'):\n        raise ValueError('status must be either ACTIVE or CLOSED')\n\n    alert = client.update_alert_status(alert_id, status)\n\n    # INTEGRATION DEVELOPER TIP\n    # We want to convert the \"updated\" time from timestamp(s) to ISO8601 as\n    # Cortex XSOAR customers and integrations use this format by default\n    if 'updated' in alert:\n        updated_time_ms = int(alert.get('updated', '0')) * 1000\n        alert['updated'] = timestamp_to_datestring(updated_time_ms)\n\n    # tableToMarkdown() is defined is CommonServerPython.py and is used very\n    # often to convert lists and dicts into a human readable format in markdown\n    readable_output = tableToMarkdown(f'HelloWorld Alert {alert_id}', alert)\n\n    return CommandResults(\n        readable_output=readable_output,\n        outputs_prefix='HelloWorld.Alert',\n        outputs_key_field='alert_id',\n        outputs=alert\n    )\n\n\ndef scan_start_command(client: Client, args: Dict[str, Any]) -> CommandResults:\n    \"\"\"\n    helloworld-start-scan command: Starts a HelloWorld scan.\n\n    Args:\n        client (Client): HelloWorld client to use.\n        args (dict): all command arguments, usually passed from ``demisto.args()``.\n            ``args['hostname']`` hostname to run the scan on\n\n\n    Returns:\n        CommandResults: A ``CommandResults`` object that is then passed to ``return_results``, that contains a scan job\n        status.\n    \"\"\"\n\n    hostname = args.get('hostname', None)\n    if not hostname:\n        raise ValueError('hostname not specified')\n\n    scan = client.scan_start(hostname=hostname)\n\n    # INTEGRATION DEVELOPER TIP\n    # The API doesn't return the hostname of the scan it was called against,\n    # which is the input. It could be useful to have that information in the\n    # XSOAR context, so we are adding it manually here, based on the command\n    # input argument.\n    scan['hostname'] = hostname\n\n    scan_id = scan.get('scan_id')\n\n    readable_output = f'Started scan {scan_id}'\n\n    return CommandResults(\n        readable_output=readable_output,\n        outputs_prefix='HelloWorld.Scan',\n        outputs_key_field='scan_id',\n        outputs=scan\n    )\n\n\ndef scan_status_command(client: Client, args: Dict[str, Any]) -> CommandResults:\n    \"\"\"\n    helloworld-scan-status command: Returns status for HelloWorld scans.\n\n    Args:\n        client (Client): HelloWorld client to use.\n        args (dict): all command arguments, usually passed from ``demisto.args()``.\n            ``args['scan_id']`` list of scan IDs or single scan ID.\n\n    Returns:\n        CommandResults: A ``CommandResults`` object that is then passed to ``return_results``, that contains a scan\n        status.\n    \"\"\"\n\n    scan_id_list = argToList(args.get('scan_id', []))\n    if len(scan_id_list) == 0:\n        raise ValueError('scan_id(s) not specified')\n\n    scan_list: List[Dict[str, Any]] = []\n    for scan_id in scan_id_list:\n        scan = client.scan_status(scan_id=scan_id)\n        scan_list.append(scan)\n\n    readable_output = tableToMarkdown('Scan status', scan_list)\n\n    return CommandResults(\n        readable_output=readable_output,\n        outputs_prefix='HelloWorld.Scan',\n        outputs_key_field='scan_id',\n        outputs=scan_list\n    )\n\n\ndef scan_results_command(client: Client, args: Dict[str, Any]) ->\\\n        Union[Dict[str, Any], CommandResults, List[CommandResults]]:\n    \"\"\"\n    helloworld-scan-results command: Returns results for a HelloWorld scan.\n\n    Args:\n        client (Client): HelloWorld client to use.\n        args (dict): all command arguments, usually passed from ``demisto.args()``.\n            ``args['scan_id']`` scan ID to retrieve results.\n            ``args['format']`` format of the results. Options are 'file' or 'json'.\n\n    Returns:\n        CommandResults/dict: A ``CommandResults`` compatible to return ``return_results()``, that contains a scan result\n        when json format is selected, or a Dict of entries also compatible to ``return_results()`` that contains the\n        output file when file format is selected.\n    \"\"\"\n\n    scan_id = args.get('scan_id', None)\n    if not scan_id:\n        raise ValueError('scan_id not specified')\n\n    scan_format = args.get('format', 'file')\n\n    # INTEGRATION DEVELOPER TIP\n    # This function supports returning data in multiple formats, either in a json\n    # format that is then mapped to a table, or as a file attachment.\n    # In this case, if the format is \"file\", the return value is different and\n    # uses a raw format  and ``fileResult()`` directly instead of\n    # ``CommandResults``. In either case you should return data to main and\n    # call ``return_results()`` from there.\n    # Always use ``CommandResults`` when possible but, if you need to return\n    # anything special like a file, you can use this raw format.\n\n    results = client.scan_results(scan_id=scan_id)\n    if scan_format == 'file':\n        return (\n            fileResult(\n                filename=f'{scan_id}.json',\n                data=json.dumps(results, indent=4),\n                file_type=entryTypes['entryInfoFile']\n            )\n        )\n    elif scan_format == 'json':\n        # This scan returns CVE information. CVE is also part of the XSOAR\n        # context standard, so we must extract CVE IDs and return them also.\n        # See: https://xsoar.pan.dev/docs/integrations/context-standards#cve\n        cves: List[Common.CVE] = []\n        command_results: List[CommandResults] = []\n        entities = results.get('entities', [])\n        for e in entities:\n            if 'vulns' in e.keys() and isinstance(e['vulns'], list):\n                cves.extend(\n                    [Common.CVE(id=c, cvss=None, published=None, modified=None, description=None) for c in e['vulns']])\n\n        # INTEGRATION DEVELOPER TIP\n        # We want to provide a unique result for every CVE indicator.\n        # Since every entity may contain several CVE indicators,\n        # we will split the entities result and CVE indicator results.\n        readable_output = tableToMarkdown(f'Scan {scan_id} results', entities)\n        command_results.append(CommandResults(\n            readable_output=readable_output,\n            outputs_prefix='HelloWorld.Scan',\n            outputs_key_field='scan_id',\n            outputs=results\n        ))\n\n        cves = list(set(cves))  # make the indicator list unique\n        for cve in cves:\n            command_results.append(CommandResults(\n                readable_output=f\"CVE {cve}\",\n                indicator=cve\n            ))\n        return command_results\n    else:\n        raise ValueError('Incorrect format, must be \"json\" or \"file\"')\n\n\n''' MAIN FUNCTION '''\n\n\ndef main() -> None:\n    \"\"\"\n    main function, parses params and runs command functions\n    \"\"\"\n\n    params = demisto.params()\n    args = demisto.args()\n    command = demisto.command()\n\n    api_key = params.get('apikey')\n\n    # get the service API url\n    base_url = urljoin(params.get('url'), '/api/v1')\n\n    # if your Client class inherits from BaseClient, SSL verification is\n    # handled out of the box by it, just pass ``verify_certificate`` to\n    # the Client constructor\n    verify_certificate = not params.get('insecure', False)\n\n    # How much time before the first fetch to retrieve incidents\n    first_fetch_time = arg_to_datetime(\n        arg=params.get('first_fetch', '3 days'),\n        arg_name='First fetch time',\n        required=True\n    )\n    first_fetch_timestamp = int(first_fetch_time.timestamp()) if first_fetch_time else None\n    # Using assert as a type guard (since first_fetch_time is always an int when required=True)\n    assert isinstance(first_fetch_timestamp, int)\n\n    # if your Client class inherits from BaseClient, system proxy is handled\n    # out of the box by it, just pass ``proxy`` to the Client constructor\n    proxy = params.get('proxy', False)\n\n    # Integration that implements reputation commands (e.g. url, ip, domain,..., etc) must have\n    # a reliability score of the source providing the intelligence data.\n    reliability = params.get('integrationReliability', DBotScoreReliability.C)\n\n    # INTEGRATION DEVELOPER TIP\n    # You can use functions such as ``demisto.debug()``, ``demisto.info()``,\n    # etc. to print information in the XSOAR server log. You can set the log\n    # level on the server configuration\n    # See: https://xsoar.pan.dev/docs/integrations/code-conventions#logging\n\n    demisto.debug(f'Command being called is {command}')\n    try:\n        headers = {\n            'Authorization': f'Bearer {api_key}'\n        }\n        client = Client(\n            base_url=base_url,\n            verify=verify_certificate,\n            headers=headers,\n            proxy=proxy)\n\n        if command == 'test-module':\n            # This is the call made when pressing the integration Test button.\n            result = test_module(client, params, first_fetch_timestamp)\n            return_results(result)\n\n        elif command == 'fetch-incidents':\n            # Set and define the fetch incidents command to run after activated via integration settings.\n            alert_status = params.get('alert_status', None)\n            alert_type = params.get('alert_type', None)\n            min_severity = params.get('min_severity', None)\n\n            # Convert the argument to an int using helper function or set to MAX_INCIDENTS_TO_FETCH\n            max_results = arg_to_number(\n                arg=params.get('max_fetch'),\n                arg_name='max_fetch',\n                required=False\n            )\n            if not max_results or max_results > MAX_INCIDENTS_TO_FETCH:\n                max_results = MAX_INCIDENTS_TO_FETCH\n\n            next_run, incidents = fetch_incidents(\n                client=client,\n                max_results=max_results,\n                last_run=demisto.getLastRun(),  # getLastRun() gets the last run dict\n                first_fetch_time=first_fetch_timestamp,\n                alert_status=alert_status,\n                min_severity=min_severity,\n                alert_type=alert_type\n            )\n\n            # saves next_run for the time fetch-incidents is invoked\n            demisto.setLastRun(next_run)\n            # fetch-incidents calls ``demisto.incidents()`` to provide the list\n            # of incidents to create\n            demisto.incidents(incidents)\n\n        elif command == 'ip':\n            default_threshold_ip = arg_to_number(params.get('threshold_ip')) or DEFAULT_INDICATORS_THRESHOLD\n            return_results(ip_reputation_command(client, args, default_threshold_ip, reliability))\n\n        elif command == 'domain':\n            default_threshold_domain = \\\n                arg_to_number(params.get('threshold_domain')) or DEFAULT_INDICATORS_THRESHOLD\n            return_results(domain_reputation_command(client, args, default_threshold_domain, reliability))\n\n        elif command == 'helloworld-say-hello':\n            return_results(say_hello_command(client, args))\n\n        elif command == 'helloworld-search-alerts':\n            return_results(search_alerts_command(client, args))\n\n        elif command == 'helloworld-get-alert':\n            return_results(get_alert_command(client, args))\n\n        elif command == 'helloworld-update-alert-status':\n            return_results(update_alert_status_command(client, args))\n\n        elif command == 'helloworld-scan-start':\n            return_results(scan_start_command(client, args))\n\n        elif command == 'helloworld-scan-status':\n            return_results(scan_status_command(client, args))\n\n        elif command == 'helloworld-scan-results':\n            return_results(scan_results_command(client, args))\n\n        else:\n            raise NotImplementedError(f'Command {command} is not implemented')\n\n    # Log exceptions and return errors\n    except Exception as e:\n        return_error(f'Failed to execute {command} command.\\nError:\\n{str(e)}')\n\n\n''' ENTRY POINT '''\n\nif __name__ in ('__main__', '__builtin__', 'builtins'):\n    main()\n\nregister_module_line('HelloWorld', 'end', __line__())\n",
                "subtype": "python3",
                "type": "python"
            }
        },
        "code_lang": "python"
    },
    "layoutscontainer-Custom_Layout.json": {
        "id": "84731e69-0e55-40f9-806a-6452f97a01a0",
        "name": "Custom Layout",
        "entity": "Layouts",
        "type": "layoutscontainer",
        "file_name": "layoutscontainer-Custom_Layout.json",
        "file_extension": "json",
        "data": {
            "cacheVersn": 0,
            "close": {
                "sections": [
                    {
                        "description": "",
                        "fields": [
                            {
                                "fieldId": "incident_closereason",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_closenotes",
                                "isVisible": true
                            }
                        ],
                        "isVisible": true,
                        "name": "Basic Information",
                        "query": null,
                        "queryType": "",
                        "readOnly": false,
                        "type": ""
                    },
                    {
                        "description": "",
                        "isVisible": true,
                        "name": "Custom Fields",
                        "query": null,
                        "queryType": "",
                        "readOnly": false,
                        "type": ""
                    }
                ]
            },
            "definitionId": "",
            "description": "",
            "detached": false,
            "details": null,
            "detailsV2": {
                "TypeName": "",
                "tabs": [
                    {
                        "id": "summary",
                        "name": "Legacy Summary",
                        "type": "summary"
                    },
                    {
                        "id": "caseinfoid",
                        "name": "Incident Info",
                        "sections": [
                            {
                                "displayType": "ROW",
                                "h": 2,
                                "i": "caseinfoid-fce71720-98b0-11e9-97d7-ed26ef9e46c8",
                                "isVisible": true,
                                "items": [
                                    {
                                        "endCol": 2,
                                        "fieldId": "type",
                                        "height": 22,
                                        "id": "incident-type-field",
                                        "index": 0,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    },
                                    {
                                        "endCol": 2,
                                        "fieldId": "severity",
                                        "height": 22,
                                        "id": "incident-severity-field",
                                        "index": 1,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    },
                                    {
                                        "endCol": 2,
                                        "fieldId": "owner",
                                        "height": 22,
                                        "id": "incident-owner-field",
                                        "index": 2,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    },
                                    {
                                        "endCol": 2,
                                        "fieldId": "sourcebrand",
                                        "height": 22,
                                        "id": "incident-sourceBrand-field",
                                        "index": 4,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    },
                                    {
                                        "endCol": 2,
                                        "fieldId": "sourceinstance",
                                        "height": 22,
                                        "id": "incident-sourceInstance-field",
                                        "index": 5,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    },
                                    {
                                        "endCol": 2,
                                        "fieldId": "playbookid",
                                        "height": 22,
                                        "id": "incident-playbookId-field",
                                        "index": 6,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    }
                                ],
                                "maxW": 3,
                                "name": "Case Details",
                                "w": 1,
                                "x": 0,
                                "y": 0
                            },
                            {
                                "h": 2,
                                "i": "caseinfoid-61263cc0-98b1-11e9-97d7-ed26ef9e46c8",
                                "maxW": 3,
                                "name": "Notes",
                                "type": "notes",
                                "w": 1,
                                "x": 2,
                                "y": 0
                            },
                            {
                                "displayType": "ROW",
                                "h": 2,
                                "i": "caseinfoid-6aabad20-98b1-11e9-97d7-ed26ef9e46c8",
                                "maxW": 3,
                                "name": "Work Plan",
                                "type": "workplan",
                                "w": 1,
                                "x": 1,
                                "y": 0
                            },
                            {
                                "displayType": "ROW",
                                "h": 2,
                                "i": "caseinfoid-770ec200-98b1-11e9-97d7-ed26ef9e46c8",
                                "isVisible": true,
                                "maxW": 3,
                                "name": "Linked Incidents",
                                "type": "linkedIncidents",
                                "w": 1,
                                "x": 1,
                                "y": 6
                            },
                            {
                                "displayType": "ROW",
                                "h": 2,
                                "i": "caseinfoid-842632c0-98b1-11e9-97d7-ed26ef9e46c8",
                                "maxW": 3,
                                "name": "Child Incidents",
                                "type": "childInv",
                                "w": 1,
                                "x": 2,
                                "y": 4
                            },
                            {
                                "displayType": "ROW",
                                "h": 2,
                                "i": "caseinfoid-4a31afa0-98ba-11e9-a519-93a53c759fe0",
                                "maxW": 3,
                                "name": "Evidence",
                                "type": "evidence",
                                "w": 1,
                                "x": 2,
                                "y": 2
                            },
                            {
                                "displayType": "ROW",
                                "h": 2,
                                "hideName": false,
                                "i": "caseinfoid-7717e580-9bed-11e9-9a3f-8b4b2158e260",
                                "maxW": 3,
                                "name": "Team Members",
                                "type": "team",
                                "w": 1,
                                "x": 2,
                                "y": 6
                            },
                            {
                                "displayType": "ROW",
                                "h": 2,
                                "i": "caseinfoid-7ce69dd0-a07f-11e9-936c-5395a1acf11e",
                                "maxW": 3,
                                "name": "Indicators",
                                "query": "",
                                "queryType": "input",
                                "type": "indicators",
                                "w": 2,
                                "x": 0,
                                "y": 4
                            },
                            {
                                "displayType": "CARD",
                                "h": 2,
                                "i": "caseinfoid-ac32f620-a0b0-11e9-b27f-13ae1773d289",
                                "items": [
                                    {
                                        "endCol": 1,
                                        "fieldId": "occurred",
                                        "height": 22,
                                        "id": "incident-occurred-field",
                                        "index": 0,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    },
                                    {
                                        "endCol": 1,
                                        "fieldId": "dbotmodified",
                                        "height": 22,
                                        "id": "incident-modified-field",
                                        "index": 1,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    },
                                    {
                                        "endCol": 2,
                                        "fieldId": "dbotduedate",
                                        "height": 22,
                                        "id": "incident-dueDate-field",
                                        "index": 2,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    },
                                    {
                                        "endCol": 2,
                                        "fieldId": "dbotcreated",
                                        "height": 22,
                                        "id": "incident-created-field",
                                        "index": 0,
                                        "sectionItemType": "field",
                                        "startCol": 1
                                    },
                                    {
                                        "endCol": 2,
                                        "fieldId": "dbotclosed",
                                        "height": 22,
                                        "id": "incident-closed-field",
                                        "index": 1,
                                        "sectionItemType": "field",
                                        "startCol": 1
                                    }
                                ],
                                "maxW": 3,
                                "name": "Timeline Information",
                                "w": 1,
                                "x": 0,
                                "y": 2
                            },
                            {
                                "displayType": "ROW",
                                "h": 2,
                                "i": "caseinfoid-88e6bf70-a0b1-11e9-b27f-13ae1773d289",
                                "isVisible": true,
                                "items": [
                                    {
                                        "endCol": 2,
                                        "fieldId": "dbotclosed",
                                        "height": 22,
                                        "id": "incident-dbotClosed-field",
                                        "index": 0,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    },
                                    {
                                        "endCol": 2,
                                        "fieldId": "closereason",
                                        "height": 22,
                                        "id": "incident-closeReason-field",
                                        "index": 1,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    },
                                    {
                                        "endCol": 2,
                                        "fieldId": "closenotes",
                                        "height": 22,
                                        "id": "incident-closeNotes-field",
                                        "index": 2,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    }
                                ],
                                "maxW": 3,
                                "name": "Closing Information",
                                "w": 1,
                                "x": 0,
                                "y": 6
                            },
                            {
                                "displayType": "CARD",
                                "h": 2,
                                "i": "caseinfoid-e54b1770-a0b1-11e9-b27f-13ae1773d289",
                                "isVisible": true,
                                "items": [
                                    {
                                        "endCol": 2,
                                        "fieldId": "details",
                                        "height": 22,
                                        "id": "incident-details-field",
                                        "index": 0,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    }
                                ],
                                "maxW": 3,
                                "name": "Investigation Data",
                                "w": 1,
                                "x": 1,
                                "y": 2
                            }
                        ],
                        "type": "custom"
                    },
                    {
                        "id": "warRoom",
                        "name": "War Room",
                        "type": "warRoom"
                    },
                    {
                        "id": "workPlan",
                        "name": "Work Plan",
                        "type": "workPlan"
                    },
                    {
                        "id": "evidenceBoard",
                        "name": "Evidence Board",
                        "type": "evidenceBoard"
                    },
                    {
                        "id": "relatedIncidents",
                        "name": "Related Incidents",
                        "type": "relatedIncidents"
                    },
                    {
                        "id": "canvas",
                        "name": "Canvas",
                        "type": "canvas"
                    }
                ]
            },
            "edit": {
                "sections": [
                    {
                        "description": "",
                        "fields": [
                            {
                                "fieldId": "incident_name",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_occurred",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_reminder",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_owner",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_roles",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_type",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_severity",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_playbookid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_labels",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_phase",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_details",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_attachment",
                                "isVisible": true
                            }
                        ],
                        "isVisible": true,
                        "name": "Basic Information",
                        "query": null,
                        "queryType": "",
                        "readOnly": false,
                        "type": ""
                    },
                    {
                        "description": "",
                        "fields": [
                            {
                                "fieldId": "incident_additionaldata",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_agentid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_agentsid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_agentversion",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_alertcategory",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_alertid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_alertname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_alertsource",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_alerttypeid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_app",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_appchannelname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_appmessage",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_assigneduser",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_assignmentgroup",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_birthday",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_caller",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_categories",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_changed",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_childprocess",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_classification",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_cloudaccountid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_cloudinstanceid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_cmd",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_cmdline",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_commandline",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_comment",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_country",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_countrycode",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_countrycodenumber",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_customincident",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_description",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_destinationhostname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_destinationip",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_destinationnetwork",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_destinationnetworks",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_destinationport",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_detectedendpoints",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_detectedips",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_detecteduser",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_detectionurl",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_deviceexternalip",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_deviceexternalips",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_devicehash",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_deviceid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_deviceinternalips",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_devicelocalip",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_devicemacaddress",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_devicemodel",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_devicename",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_deviceosname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_deviceosversion",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_deviceou",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_deviceusername",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_domainname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_dsts",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_endpoint",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_escalation",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_eventid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_eventtype",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_externalcategoryid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_externalcategoryname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_externalconfidence",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_externalendtime",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_externallink",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_externalseverity",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_externalstarttime",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_externalstatus",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_externalsubcategoryid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_externalsubcategoryname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_externalsystemid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_filehash",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_filemd5",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_filename",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_filenames",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_filepath",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_filepaths",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_filesha1",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_filesha256",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_filesize",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_firstname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_fullname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_hostnames",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_incidentlink",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_incomingmirrorerror",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_investigationstage",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_isactive",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_lastname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_logsource",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_lowlevelcategoriesevents",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_macaddress",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_md5",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_mitretacticid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_mitretacticname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_mitretechniqueid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_mitretechniquename",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_mobiledevicemodel",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_objective",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_orglevel1",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_orglevel2",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_orglevel3",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_orgunit",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_os",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_ostype",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_osversion",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_outgoingmirrorerror",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_parentcmdline",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_parentprocess",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_parentprocesscmd",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_parentprocessfilepath",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_parentprocessids",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_parentprocessmd5",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_parentprocessname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_parentprocesspath",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_parentprocesssha256",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_phonenumber",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_pid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_policyactions",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_processcmd",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_processcreationtime",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_processid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_processmd5",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_processname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_processnames",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_processpath",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_processpaths",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_processsha256",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_protocol",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_protocolnames",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_registryhive",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_registrykey",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_registryvalue",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_registryvaluetype",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_renderedhtml",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_rulename",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_scenario",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sha1",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sha256",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sha512",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_similarincidents",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_similarincidentsdbot",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourcecategory",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourcecreatedby",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourceexternalips",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourcehostname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourceip",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourcenetwork",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourcenetworks",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourceport",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourcepriority",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourcestatus",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourceusername",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_srcs",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_state",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_subcategory",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_tactic",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_tacticid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_tags",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_teamname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_technique",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_techniqueid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_tenantname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_threatfamilyname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_threathuntingdetectedhostnames",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_threathuntingdetectedip",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_threatname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_ticketacknowledgeddate",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_ticketcloseddate",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_ticketnumber",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_ticketopeneddate",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_urls",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_urlsslverification",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_usecasedescription",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_useraccountcontrol",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_users",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_usersid",
                                "isVisible": true
                            }
                        ],
                        "isVisible": true,
                        "name": "Custom Fields",
                        "query": null,
                        "queryType": "",
                        "readOnly": false,
                        "type": ""
                    }
                ]
            },
            "fromServerVersion": "",
            "group": "incident",
            "id": "84731e69-0e55-40f9-806a-6452f97a01a0",
            "indicatorsDetails": null,
            "indicatorsQuickView": null,
            "itemVersion": "",
            "locked": false,
            "mobile": null,
            "name": "Custom Layout",
            "packID": "",
            "packName": "",
            "quickView": {
                "sections": [
                    {
                        "description": "",
                        "fields": [
                            {
                                "fieldId": "incident_type",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_severity",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_owner",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_dbotstatus",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourcebrand",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourceinstance",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_playbookid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_phase",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_roles",
                                "isVisible": true
                            }
                        ],
                        "isVisible": true,
                        "name": "Basic Information",
                        "query": null,
                        "queryType": "",
                        "readOnly": false,
                        "type": ""
                    },
                    {
                        "description": "",
                        "fields": [
                            {
                                "fieldId": "incident_occurred",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_dbotcreated",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_dbotduedate",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_dbotmodified",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_dbottotaltime",
                                "isVisible": true
                            }
                        ],
                        "isVisible": true,
                        "name": "Timeline Information",
                        "query": null,
                        "queryType": "",
                        "readOnly": false,
                        "type": ""
                    },
                    {
                        "description": "",
                        "fields": [
                            {
                                "fieldId": "incident_additionaldata",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_agentid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_agentsid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_agentversion",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_alertcategory",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_alertid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_alertname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_alertsource",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_alerttypeid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_app",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_appchannelname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_appmessage",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_assigneduser",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_assignmentgroup",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_birthday",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_caller",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_categories",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_changed",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_childprocess",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_classification",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_cloudaccountid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_cloudinstanceid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_cmd",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_cmdline",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_commandline",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_comment",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_country",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_countrycode",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_countrycodenumber",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_customincident",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_description",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_destinationhostname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_destinationip",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_destinationnetwork",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_destinationnetworks",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_destinationport",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_detectedendpoints",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_detectedips",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_detecteduser",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_detectionsla",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_detectionurl",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_deviceexternalip",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_deviceexternalips",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_devicehash",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_deviceid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_deviceinternalips",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_devicelocalip",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_devicemacaddress",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_devicemodel",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_devicename",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_deviceosname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_deviceosversion",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_deviceou",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_deviceusername",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_domainname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_dsts",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_endpoint",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_escalation",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_eventid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_eventtype",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_externalcategoryid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_externalcategoryname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_externalconfidence",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_externalendtime",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_externallink",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_externalseverity",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_externalstarttime",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_externalstatus",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_externalsubcategoryid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_externalsubcategoryname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_externalsystemid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_filehash",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_filemd5",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_filename",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_filenames",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_filepath",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_filepaths",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_filesha1",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_filesha256",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_filesize",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_firstname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_fullname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_hostnames",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_incidentlink",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_incomingmirrorerror",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_investigationstage",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_isactive",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_lastname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_logsource",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_lowlevelcategoriesevents",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_macaddress",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_md5",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_mitretacticid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_mitretacticname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_mitretechniqueid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_mitretechniquename",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_mobiledevicemodel",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_objective",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_orglevel1",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_orglevel2",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_orglevel3",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_orgunit",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_os",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_ostype",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_osversion",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_outgoingmirrorerror",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_parentcmdline",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_parentprocess",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_parentprocesscmd",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_parentprocessfilepath",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_parentprocessids",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_parentprocessmd5",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_parentprocessname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_parentprocesspath",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_parentprocesssha256",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_phonenumber",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_pid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_policyactions",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_processcmd",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_processcreationtime",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_processid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_processmd5",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_processname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_processnames",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_processpath",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_processpaths",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_processsha256",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_protocol",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_protocolnames",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_registryhive",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_registrykey",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_registryvalue",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_registryvaluetype",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_remediationsla",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_renderedhtml",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_rulename",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_scenario",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sha1",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sha256",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sha512",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_similarincidents",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_similarincidentsdbot",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourcecategory",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourcecreatedby",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourceexternalips",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourcehostname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourceip",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourcenetwork",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourcenetworks",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourceport",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourcepriority",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourcestatus",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_sourceusername",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_srcs",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_state",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_subcategory",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_tactic",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_tacticid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_tags",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_teamname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_technique",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_techniqueid",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_tenantname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_threatfamilyname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_threathuntingdetectedhostnames",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_threathuntingdetectedip",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_threatname",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_ticketacknowledgeddate",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_ticketcloseddate",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_ticketnumber",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_ticketopeneddate",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_timetoassignment",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_urls",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_urlsslverification",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_usecasedescription",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_useraccountcontrol",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_users",
                                "isVisible": true
                            },
                            {
                                "fieldId": "incident_usersid",
                                "isVisible": true
                            }
                        ],
                        "isVisible": true,
                        "name": "Custom Fields",
                        "query": null,
                        "queryType": "",
                        "readOnly": false,
                        "type": ""
                    },
                    {
                        "description": "",
                        "fields": [
                            {
                                "fieldId": "incident_labels",
                                "isVisible": true
                            }
                        ],
                        "isVisible": true,
                        "name": "Labels",
                        "query": null,
                        "queryType": "",
                        "readOnly": true,
                        "type": "labels"
                    }
                ]
            },
            "quickViewV2": null,
            "system": false,
            "toServerVersion": "",
            "version": -1
        }
    },
    "layoutscontainer-ExampleType.json": {
        "id": "4d45f0d7-5fdd-4a4b-8f1e-5f2502f90a61",
        "name": "ExampleType",
        "entity": "Layouts",
        "type": "layoutscontainer",
        "file_name": "layoutscontainer-ExampleType.json",
        "file_extension": "json",
        "data": {
            "cacheVersn": 0,
            "close": null,
            "definitionId": "",
            "description": "",
            "detached": false,
            "details": null,
            "detailsV2": {
                "TypeName": "",
                "tabs": [
                    {
                        "id": "summary",
                        "name": "Legacy Summary",
                        "type": "summary"
                    },
                    {
                        "hidden": false,
                        "id": "pdpxflhfiq",
                        "name": "Test Tab",
                        "sections": [],
                        "type": "custom"
                    },
                    {
                        "id": "caseinfoid",
                        "name": "Incident Info",
                        "sections": [
                            {
                                "displayType": "ROW",
                                "h": 2,
                                "i": "caseinfoid-fce71720-98b0-11e9-97d7-ed26ef9e46c8",
                                "isVisible": true,
                                "items": [
                                    {
                                        "endCol": 2,
                                        "fieldId": "type",
                                        "height": 22,
                                        "id": "incident-type-field",
                                        "index": 0,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    },
                                    {
                                        "endCol": 2,
                                        "fieldId": "severity",
                                        "height": 22,
                                        "id": "incident-severity-field",
                                        "index": 1,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    },
                                    {
                                        "endCol": 2,
                                        "fieldId": "owner",
                                        "height": 22,
                                        "id": "incident-owner-field",
                                        "index": 2,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    },
                                    {
                                        "endCol": 2,
                                        "fieldId": "sourcebrand",
                                        "height": 22,
                                        "id": "incident-sourceBrand-field",
                                        "index": 4,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    },
                                    {
                                        "endCol": 2,
                                        "fieldId": "sourceinstance",
                                        "height": 22,
                                        "id": "incident-sourceInstance-field",
                                        "index": 5,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    },
                                    {
                                        "endCol": 2,
                                        "fieldId": "playbookid",
                                        "height": 22,
                                        "id": "incident-playbookId-field",
                                        "index": 6,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    }
                                ],
                                "maxW": 3,
                                "name": "Case Details",
                                "w": 1,
                                "x": 0,
                                "y": 0
                            },
                            {
                                "h": 2,
                                "i": "caseinfoid-61263cc0-98b1-11e9-97d7-ed26ef9e46c8",
                                "maxW": 3,
                                "name": "Notes",
                                "type": "notes",
                                "w": 1,
                                "x": 2,
                                "y": 0
                            },
                            {
                                "displayType": "ROW",
                                "h": 2,
                                "i": "caseinfoid-6aabad20-98b1-11e9-97d7-ed26ef9e46c8",
                                "maxW": 3,
                                "name": "Work Plan",
                                "type": "workplan",
                                "w": 1,
                                "x": 1,
                                "y": 0
                            },
                            {
                                "displayType": "ROW",
                                "h": 2,
                                "i": "caseinfoid-770ec200-98b1-11e9-97d7-ed26ef9e46c8",
                                "isVisible": true,
                                "maxW": 3,
                                "name": "Linked Incidents",
                                "type": "linkedIncidents",
                                "w": 1,
                                "x": 1,
                                "y": 6
                            },
                            {
                                "displayType": "ROW",
                                "h": 2,
                                "i": "caseinfoid-842632c0-98b1-11e9-97d7-ed26ef9e46c8",
                                "maxW": 3,
                                "name": "Child Incidents",
                                "type": "childInv",
                                "w": 1,
                                "x": 2,
                                "y": 4
                            },
                            {
                                "displayType": "ROW",
                                "h": 2,
                                "i": "caseinfoid-4a31afa0-98ba-11e9-a519-93a53c759fe0",
                                "maxW": 3,
                                "name": "Evidence",
                                "type": "evidence",
                                "w": 1,
                                "x": 2,
                                "y": 2
                            },
                            {
                                "displayType": "ROW",
                                "h": 2,
                                "hideName": false,
                                "i": "caseinfoid-7717e580-9bed-11e9-9a3f-8b4b2158e260",
                                "maxW": 3,
                                "name": "Team Members",
                                "type": "team",
                                "w": 1,
                                "x": 2,
                                "y": 6
                            },
                            {
                                "displayType": "ROW",
                                "h": 2,
                                "i": "caseinfoid-7ce69dd0-a07f-11e9-936c-5395a1acf11e",
                                "maxW": 3,
                                "name": "Indicators",
                                "query": "",
                                "queryType": "input",
                                "type": "indicators",
                                "w": 2,
                                "x": 0,
                                "y": 4
                            },
                            {
                                "displayType": "CARD",
                                "h": 2,
                                "i": "caseinfoid-ac32f620-a0b0-11e9-b27f-13ae1773d289",
                                "items": [
                                    {
                                        "endCol": 1,
                                        "fieldId": "occurred",
                                        "height": 22,
                                        "id": "incident-occurred-field",
                                        "index": 0,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    },
                                    {
                                        "endCol": 1,
                                        "fieldId": "dbotmodified",
                                        "height": 22,
                                        "id": "incident-modified-field",
                                        "index": 1,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    },
                                    {
                                        "endCol": 2,
                                        "fieldId": "dbotduedate",
                                        "height": 22,
                                        "id": "incident-dueDate-field",
                                        "index": 2,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    },
                                    {
                                        "endCol": 2,
                                        "fieldId": "dbotcreated",
                                        "height": 22,
                                        "id": "incident-created-field",
                                        "index": 0,
                                        "sectionItemType": "field",
                                        "startCol": 1
                                    },
                                    {
                                        "endCol": 2,
                                        "fieldId": "dbotclosed",
                                        "height": 22,
                                        "id": "incident-closed-field",
                                        "index": 1,
                                        "sectionItemType": "field",
                                        "startCol": 1
                                    }
                                ],
                                "maxW": 3,
                                "name": "Timeline Information",
                                "w": 1,
                                "x": 0,
                                "y": 2
                            },
                            {
                                "displayType": "ROW",
                                "h": 2,
                                "i": "caseinfoid-88e6bf70-a0b1-11e9-b27f-13ae1773d289",
                                "isVisible": true,
                                "items": [
                                    {
                                        "endCol": 2,
                                        "fieldId": "dbotclosed",
                                        "height": 22,
                                        "id": "incident-dbotClosed-field",
                                        "index": 0,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    },
                                    {
                                        "endCol": 2,
                                        "fieldId": "closereason",
                                        "height": 22,
                                        "id": "incident-closeReason-field",
                                        "index": 1,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    },
                                    {
                                        "endCol": 2,
                                        "fieldId": "closenotes",
                                        "height": 22,
                                        "id": "incident-closeNotes-field",
                                        "index": 2,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    }
                                ],
                                "maxW": 3,
                                "name": "Closing Information",
                                "w": 1,
                                "x": 0,
                                "y": 6
                            },
                            {
                                "displayType": "CARD",
                                "h": 2,
                                "i": "caseinfoid-e54b1770-a0b1-11e9-b27f-13ae1773d289",
                                "isVisible": true,
                                "items": [
                                    {
                                        "endCol": 2,
                                        "fieldId": "details",
                                        "height": 22,
                                        "id": "incident-details-field",
                                        "index": 0,
                                        "sectionItemType": "field",
                                        "startCol": 0
                                    }
                                ],
                                "maxW": 3,
                                "name": "Investigation Data",
                                "w": 1,
                                "x": 1,
                                "y": 2
                            }
                        ],
                        "type": "custom"
                    },
                    {
                        "id": "warRoom",
                        "name": "War Room",
                        "type": "warRoom"
                    },
                    {
                        "id": "workPlan",
                        "name": "Work Plan",
                        "type": "workPlan"
                    },
                    {
                        "hidden": true,
                        "id": "evidenceBoard",
                        "name": "Evidence Board",
                        "type": "evidenceBoard"
                    },
                    {
                        "hidden": true,
                        "id": "relatedIncidents",
                        "name": "Related Incidents",
                        "type": "relatedIncidents"
                    },
                    {
                        "hidden": true,
                        "id": "canvas",
                        "name": "Canvas",
                        "type": "canvas"
                    }
                ]
            },
            "edit": null,
            "fromServerVersion": "",
            "group": "incident",
            "id": "4d45f0d7-5fdd-4a4b-8f1e-5f2502f90a61",
            "indicatorsDetails": null,
            "indicatorsQuickView": null,
            "itemVersion": "",
            "locked": false,
            "mobile": null,
            "name": "ExampleType",
            "packID": "",
            "packName": "",
            "quickView": null,
            "quickViewV2": null,
            "system": false,
            "toServerVersion": "",
            "version": -1
        }
    },
    "playbook-custom_playbook.yml": {
        "id": "a53a2f17-2f05-486d-867f-a36c9f5b88d4",
        "name": "custom_playbook",
        "entity": "Playbooks",
        "type": "playbook",
        "file_name": "custom_playbook.yml",
        "file_extension": "yml",
        "data": {
            "id": "a53a2f17-2f05-486d-867f-a36c9f5b88d4",
            "inputs": [],
            "name": "custom_playbook",
            "outputs": [],
            "quiet": true,
            "starttaskid": "0",
            "tasks": {
                "0": {
                    "continueonerrortype": "",
                    "id": "0",
                    "ignoreworker": false,
                    "isautoswitchedtoquietmode": false,
                    "isoversize": false,
                    "nexttasks": {
                        "#none#": [
                            "1"
                        ]
                    },
                    "note": false,
                    "quietmode": 0,
                    "separatecontext": false,
                    "skipunavailable": false,
                    "task": {
                        "brand": "",
                        "id": "86660429-4b3c-4d29-8b57-0d74da31e067",
                        "iscommand": false,
                        "name": "",
                        "version": -1
                    },
                    "taskid": "86660429-4b3c-4d29-8b57-0d74da31e067",
                    "timertriggers": [],
                    "type": "start",
                    "view": "{\n  \"position\": {\n    \"x\": 50,\n    \"y\": 50\n  }\n}"
                },
                "1": {
                    "continueonerrortype": "",
                    "id": "1",
                    "ignoreworker": false,
                    "isautoswitchedtoquietmode": false,
                    "isoversize": false,
                    "note": false,
                    "quietmode": 0,
                    "separatecontext": false,
                    "skipunavailable": false,
                    "task": {
                        "brand": "",
                        "id": "44e0aa12-7c30-48b3-86cd-f8cf99a9cff8",
                        "iscommand": false,
                        "name": "calling custom auto",
                        "script": "e4c2306d-5d4b-4b19-8320-6fdad94595d4",
                        "type": "regular",
                        "version": -1
                    },
                    "taskid": "44e0aa12-7c30-48b3-86cd-f8cf99a9cff8",
                    "timertriggers": [],
                    "type": "regular",
                    "view": "{\n  \"position\": {\n    \"x\": 60,\n    \"y\": 260\n  }\n}"
                }
            },
            "version": -1,
            "view": "{\n  \"linkLabelsPosition\": {},\n  \"paper\": {\n    \"dimensions\": {\n      \"height\": 305,\n      \"width\": 390,\n      \"x\": 50,\n      \"y\": 50\n    }\n  }\n}"
        }
    }
}
