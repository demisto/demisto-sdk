import pytest
import io
from CommonServerPython import *
from malwarebazaar import Client, file_command, malwarebazaar_download_sample_command, malwarebazaar_comment_add_command, malwarebazaar_samples_list_command
SERVER_URL = 'https://test_url.com'


def util_load_json(path):
    with io.open(path, mode='r', encoding='utf-8') as f:
        return json.loads(f.read())


@pytest.fixture()
def client():
    return Client(server_url=SERVER_URL, verify=True, proxy=True, headers=None, api_key='test')


MALWAREBAZAAR_SAMPLES_LIST_COMMAND_ARGS = [{'sample_type': 'tag',
                                            'sample_value': 'TrickBot', 'limit': '2', 'page': None, 'page_size':
                                            None}, {'sample_type': 'tag1', 'sample_value': 'TrickBot2', 'limit':
                                                    '444', 'page': None, 'page_size': None}]


def test_file_command(client, requests_mock):
    """
        When:
        Given:
        Then:
        """
    args = {'file':
            '094fd325049b8a9cf6d3e5ef2a6d4cc6a567d7d49c35f8bb8dd9e3c6acf3d78d'}
    mock_response_file_request = util_load_json(
        './test_data/outputs/file_request.json')
    mock_results = util_load_json('./test_data/outputs/file_command.json')
    requests_mock.post(SERVER_URL, json=mock_response_file_request)
    results = file_command(client=client, args=args)


def test_malwarebazaar_download_sample_command(client, requests_mock):
    """
        When:
        Given:
        Then:
        """
    args = {'sha256_hash':
            '094fd325049b8a9cf6d3e5ef2a6d4cc6a567d7d49c35f8bb8dd9e3c6acf3d78'}
    mock_response_malwarebazaar_download_sample_request = util_load_json(
        './test_data/outputs/malwarebazaar_download_sample_request.json')
    mock_results = util_load_json(
        './test_data/outputs/malwarebazaar_download_sample_command.json')
    requests_mock.post(SERVER_URL, json=mock_response_malwarebazaar_download_sample_request)
    results = malwarebazaar_download_sample_command(client=client, args=args)


def test_malwarebazaar_comment_add_command(client, requests_mock):
    """
        When:
        Given:
        Then:
        """
    args = {'sha256_hash':
            '094fd325049b8a9cf6d3e5ef2a6d4cc6a567d7d49c35f8bb8dd9e3c6acf3d78d',
            'comment': 'test'}
    mock_response_malwarebazaar_comment_add_request = util_load_json(
        './test_data/outputs/malwarebazaar_comment_add_request.json')
    mock_results = util_load_json(
        './test_data/outputs/malwarebazaar_comment_add_command.json')
    requests_mock.post(SERVER_URL, json=mock_response_malwarebazaar_comment_add_request)
    results = malwarebazaar_comment_add_command(client=client, args=args)
    assert results.outputs_prefix == 'MalwareBazaar.MalwarebazaarCommentAdd'
    assert results.outputs_key_field == 'sha256_hash'
    assert results.outputs == mock_results.get('outputs')
    assert results.readable_output == mock_results.get('readable_output')
    assert results.raw_response == mock_response_malwarebazaar_comment_add_request


@pytest.mark.parametrize('args', MALWAREBAZAAR_SAMPLES_LIST_COMMAND_ARGS)
def test_malwarebazaar_samples_list_command(client, requests_mock, args):
    """
        When:
        Given:
        Then:
        """
    mock_response_malwarebazaar_samples_list_request = util_load_json(
        './test_data/outputs/malwarebazaar_samples_list_request.json')
    mock_results = util_load_json(
        './test_data/outputs/malwarebazaar_samples_list_command.json')
    requests_mock.post(SERVER_URL, json=mock_response_malwarebazaar_samples_list_request)
    results = malwarebazaar_samples_list_command(client=client, args=args)
    assert results.outputs_prefix == 'MalwareBazaar.MalwarebazaarSamplesList'
    assert results.outputs_key_field == 'sha256_hash'
    assert results.readable_output == mock_results.get('readable_output')
    assert results.outputs == mock_results.get('outputs')
    assert results.raw_response == mock_response_malwarebazaar_samples_list_request
