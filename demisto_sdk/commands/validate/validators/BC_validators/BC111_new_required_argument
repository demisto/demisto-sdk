from __future__ import annotations

from typing import Iterable, List

from demisto_sdk.commands.common.constants import GitStatuses
from demisto_sdk.commands.content_graph.objects.integration import Script
from demisto_sdk.commands.validate.tools import find_command
from demisto_sdk.commands.validate.validators.base_validator import (
    BaseValidator,
    ValidationResult,
)

ContentTypes = Script


class NewRequiredArgumentValidator(BaseValidator[ContentTypes]):
    error_code = "BC111"
    description = (
        "Validate that no new *required* argument are added to an existing script."
    )
    rationale = "Adding a new argument to an existing script and defining it as *required* or changing an non-required argument to be required will break backward compatibility."
    error_message = "Possible backward compatibility break: You have added the following new *required* arguments: {arg_list} Please undo the changes."
    related_field = "script.arguments"
    is_auto_fixable = False
    expected_git_statuses = [GitStatuses.MODIFIED]

    def is_valid(self, content_items: Iterable[ContentTypes]) -> List[ValidationResult]:
        results: List[ValidationResult] = []
        arg_list = []
        for content_item in content_items:
            old_content_item = content_item.old_base_content_object

            for arg in content_item.args:  # type: ignore
                current_arg_name = arg.name

                if arg.required and not arg.defaultvalue:
                    old_corresponding_arg = next(
                        (
                            arg
                            for arg in old_content_item.args
                            if arg.name == current_arg_name
                        ),
                        None,
                    )

                    if (
                        # If the argument is new or the argument was not required before
                        not old_corresponding_arg
                    ) or not old_corresponding_arg.required:
                        arg_list.append(current_arg_name)
            if arg_list:
                results.append(
                    ValidationResult(
                        validator=self,
                        message=self.error_message.format(arg_list=arg_list),
                        content_object=content_item,
                    )
                )

        return results
