import logging
import shutil
from pathlib import Path
from tempfile import mkdtemp

from click.testing import CliRunner

from demisto_sdk.__main__ import main
from TestSuite.test_tools import str_in_call_args_list

TEMP_DIRS_PREFIX = "demisto-sdk-test-"


def test_default_logs_dir(mocker):
    """
    Given:
        demisto-sdk command with no custom log path set.

    When:
        Running demisto-sdk command.

    Then:
        Ensure logs are created at the default location, and that the path is created if it doesn't exist.
    """
    root_dir = Path(mkdtemp(prefix=TEMP_DIRS_PREFIX)).resolve()
    logs_dir_replacement = root_dir / "logs"
    mocker.patch(
        "demisto_sdk.commands.common.logger.LOGS_DIR", new=logs_dir_replacement
    )

    runner = CliRunner(mix_stderr=False)
    runner.invoke(main, ["validate", "-a"])

    assert logs_dir_replacement.exists()  # Assure 'logs' dir is generated by the code
    assert (logs_dir_replacement / "demisto_sdk_debug.log").is_file()
    shutil.rmtree(root_dir)


def test_custom_logs_dir_set_by_flag(mocker):
    """
    Given:
        demisto-sdk command with log path set by flag.

    When:
        Running demisto-sdk command.

    Then:
        Ensure logs are created at the specified location.
    """
    default_logs_dir = Path(mkdtemp(prefix=TEMP_DIRS_PREFIX)).resolve()
    custom_logs_dir = Path(mkdtemp(prefix=TEMP_DIRS_PREFIX)).resolve()

    mocker.patch("demisto_sdk.commands.common.logger.LOGS_DIR", new=default_logs_dir)
    runner = CliRunner(mix_stderr=False)
    runner.invoke(main, ["validate", "-a", "--log-file-path", str(custom_logs_dir)])

    assert (custom_logs_dir / "demisto_sdk_debug.log").is_file()
    assert (
        len(list(default_logs_dir.glob("*"))) == 0
    )  # Assure default logs dir is not used
    default_logs_dir.rmdir()
    shutil.rmtree(custom_logs_dir)


def test_custom_logs_dir_set_by_env_var(mocker, monkeypatch):
    """
    Given:
        demisto-sdk command with log path set by an environment variable.

    When:
        Running demisto-sdk command.

    Then:
        Ensure logs are created at the specified location.
    """
    default_logs_dir = Path(mkdtemp(prefix=TEMP_DIRS_PREFIX)).resolve()
    custom_logs_dir = Path(mkdtemp(prefix=TEMP_DIRS_PREFIX)).resolve()

    monkeypatch.setenv("DEMISTO_SDK_LOG_FILE_PATH", str(custom_logs_dir))
    mocker.patch("demisto_sdk.commands.common.logger.LOGS_DIR", new=default_logs_dir)
    runner = CliRunner(mix_stderr=False)
    runner.invoke(main, ["validate", "-a", "--log-file-path", str(custom_logs_dir)])

    assert (custom_logs_dir / "demisto_sdk_debug.log").is_file()
    assert (
        len(list(default_logs_dir.glob("*"))) == 0
    )  # Assure default logs dir is not used
    default_logs_dir.rmdir()
    shutil.rmtree(custom_logs_dir)


def test_custom_logs_dir_does_not_exist(mocker):
    """
    Given:
        demisto-sdk command with a non-existent log path set by flag.

    When:
        Running demisto-sdk command.

    Then:
        Ensure that the path is created, logs are created at the specified location, and a warning is printed.
    """
    default_logs_dir = Path(mkdtemp(prefix=TEMP_DIRS_PREFIX)).resolve()
    custom_logs_dir = (
        Path(mkdtemp(prefix=TEMP_DIRS_PREFIX)).resolve() / "non-existent-dir"
    )

    mocker.patch("demisto_sdk.commands.common.logger.LOGS_DIR", new=default_logs_dir)
    logger_warning = mocker.patch.object(logging.getLogger("demisto-sdk"), "warning")

    runner = CliRunner(mix_stderr=False)
    runner.invoke(main, ["validate", "-a", "--log-file-path", str(custom_logs_dir)])

    assert str_in_call_args_list(
        logger_warning.call_args_list,
        f"Log file path '{custom_logs_dir}' does not exist and will be created.",
    )
    assert (custom_logs_dir / "demisto_sdk_debug.log").is_file()
    assert (
        len(list(default_logs_dir.glob("*"))) == 0
    )  # Assure default logs dir is not used
    default_logs_dir.rmdir()
    shutil.rmtree(custom_logs_dir)


def test_logs_dir_not_a_dir(mocker):
    """
    Given:
        demisto-sdk command with a log path set by flag that points to a file.

    When:
        Running demisto-sdk command.

    Then:
        Ensure that the path is created, logs are created at the parent directory, and a warning is printed.
    """
    default_logs_dir = Path(mkdtemp(prefix=TEMP_DIRS_PREFIX)).resolve()
    custom_logs_dir = (
        Path(mkdtemp(prefix=TEMP_DIRS_PREFIX)).resolve() / "some_random_file"
    )
    custom_logs_dir.touch()
    assert custom_logs_dir.is_file()  # Ensure file was created successfully

    mocker.patch("demisto_sdk.commands.common.logger.LOGS_DIR", new=default_logs_dir)
    logger_warning = mocker.patch.object(logging.getLogger("demisto-sdk"), "warning")

    runner = CliRunner(mix_stderr=False)
    runner.invoke(main, ["validate", "-a", "--log-file-path", str(custom_logs_dir)])

    custom_logs_dir_parent = custom_logs_dir.parent

    assert str_in_call_args_list(
        logger_warning.call_args_list,
        f"Log file path '{custom_logs_dir}' is a file and not a directory. Log file will be created in "
        f"parent directory '{custom_logs_dir_parent}'.",
    )

    assert (custom_logs_dir_parent / "demisto_sdk_debug.log").is_file()
    assert (
        len(list(default_logs_dir.glob("*"))) == 0
    )  # Assure default logs dir is not used
    default_logs_dir.rmdir()
    shutil.rmtree(custom_logs_dir_parent)
