import shutil
from pathlib import Path
from tempfile import mkdtemp

from click.testing import CliRunner

from demisto_sdk.__main__ import main

TEMP_DIRS_PREFIX = "demisto-sdk-test-"


def test_logs_dir_default_value(mocker):
    """
    Given:
        demisto-sdk command with no log path set.

    When:
        Running demisto-sdk command.

    Then:
        Ensure logs are created at the default location, and that the path is created if it doesn't exist.
    """
    root_dir = Path(mkdtemp(prefix=TEMP_DIRS_PREFIX))
    logs_dir_replacement = root_dir / "logs"
    mocker.patch(
        "demisto_sdk.commands.common.logger.LOGS_DIR", new=logs_dir_replacement
    )

    runner = CliRunner(mix_stderr=False)
    runner.invoke(main, ["validate", "-a"])

    assert logs_dir_replacement.exists()  # Assure 'logs' dir is generated by the code
    assert list(logs_dir_replacement.glob("*")) == [
        logs_dir_replacement / "demisto_sdk_debug.log"
    ]
    shutil.rmtree(root_dir)


def test_logs_dir_set_by_flag(mocker):
    """
    Given:
        demisto-sdk command with log path set by flag.

    When:
        Running demisto-sdk command.

    Then:
        Ensure logs are created at the specified location.
    """
    default_logs_dir = Path(mkdtemp(prefix=TEMP_DIRS_PREFIX))
    custom_logs_dir = Path(mkdtemp(prefix=TEMP_DIRS_PREFIX))

    mocker.patch("demisto_sdk.commands.common.logger.LOGS_DIR", new=default_logs_dir)
    runner = CliRunner(mix_stderr=False)
    x = runner.invoke(main, ["validate", "-a", "--log-file-path", str(custom_logs_dir)])

    assert list(custom_logs_dir.glob("*")) == [
        custom_logs_dir / "demisto_sdk_debug.log"
    ]
    assert (
        len(list(default_logs_dir.glob("*"))) == 0
    )  # Assure default logs dir is not used
    default_logs_dir.rmdir()
    shutil.rmtree(custom_logs_dir)


def test_logs_dir_set_by_env_var(mocker, monkeypatch):
    """
    Given:
        demisto-sdk command with log path set by an environment variable.

    When:
        Running demisto-sdk command.

    Then:
        Ensure logs are created at the specified location.
    """
    default_logs_dir = Path(mkdtemp(prefix=TEMP_DIRS_PREFIX))
    custom_logs_dir = Path(mkdtemp(prefix=TEMP_DIRS_PREFIX))

    monkeypatch.setenv("DEMISTO_SDK_LOG_FILE_PATH", str(custom_logs_dir))
    mocker.patch("demisto_sdk.commands.common.logger.LOGS_DIR", new=default_logs_dir)
    runner = CliRunner(mix_stderr=False)
    runner.invoke(main, ["validate", "-a", "--log-file-path", str(custom_logs_dir)])

    assert list(custom_logs_dir.glob("*")) == [
        custom_logs_dir / "demisto_sdk_debug.log"
    ]
    assert (
        len(list(default_logs_dir.glob("*"))) == 0
    )  # Assure default logs dir is not used
    default_logs_dir.rmdir()
    shutil.rmtree(custom_logs_dir)


def test_invalid_logs_dir(mocker):
    """
    Given:
        demisto-sdk command with invalid log path set.

    When:
        Running demisto-sdk command.

    Then:
        Ensure a proper error message is printed.
    """
    default_logs_dir = Path(mkdtemp(prefix=TEMP_DIRS_PREFIX))
    mocker.patch("demisto_sdk.commands.common.logger.LOGS_DIR", new=default_logs_dir)
    invalid_path = "this/path/doesnt/exist"

    runner = CliRunner(mix_stderr=False)
    result = runner.invoke(
        main, ["validate", "-a", "--log-file-path", str(invalid_path)]
    )

    assert result.exit_code == 1
    assert (
        f"Error: Configured logs path '{invalid_path}' does not exist." in result.stdout
    )
    assert (
        len(list(default_logs_dir.glob("*"))) == 0
    )  # Assure default logs dir is not used
    default_logs_dir.rmdir()
