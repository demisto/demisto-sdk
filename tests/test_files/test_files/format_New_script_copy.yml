commonfields:
  id: 8908983a-dcaf-40c0-8c8c-d2c61b1e826b
  version: 2
name: New_script_copy
script: |
  # Python template - reading arguments, calling a command, handling errors and returning results
  res = []
  # Constant and mandatory arguments
  dArgs = {"myargname": "myvalue",
           "myotherarg": demisto.args()["mandatoryscriptarg"]}
  # Optional arguments
  if "myoptionalscriptarg" in demisto.args():
      dArgs["myinternalarg"] = demisto.args()["myoptionalscriptarg"]
  # Optional arguments with defaults - sometimes the arg is mandatory for our executeCommand
  dArgs["myargwithdefault"] = demisto.args()["myotherscriptarg"] if "myotherscriptarg" in demisto.args() else "10"

  # Calling a command - returns a list of one or more entries
  resCmdName = demisto.executeCommand("dummy-command", dArgs)
  try:
      for entry in resCmdName:
          if isError(entry):
              # Check if it's that error we know about and have a solution for - notify, retry, display a specific error message, etc.
              if "failed with status 404 NOT FOUND" in entry["Contents"]:
                  res.append({"Type": entryTypes["error"], "ContentsFormat": formats["text"],
                              "Contents": "Received HTTP Error 404 from Session API. Please ensure that you do not already have an active session with that sensor."})
              else:
                  # If it's not an error we recognize - send all entries returned from the command back to the war room as-is.
                  res = resCmdName
                  break
                  # # If it's not an error we recognize - send that error to the war room but keep handling the other returned entries
                  # res.append(entry)
          else:
              myData = demisto.get(entry, 'Contents.result_obj.results')
              # Log myData to war room - for debugging. May remove this later in production script
              demisto.log(str(myData))
              if myData:
                  res.append({"Type": entryTypes["note"], "ContentsFormat": formats["table"], "Contents": myData})
              else:
                  res.append({"Type": entryTypes["error"], "ContentsFormat": formats["text"],
                              "Contents": "Could not extract result list from response: " + json.dumps(entry["Contents"])})
  except Exception as ex:
      res.append({"Type": entryTypes["error"], "ContentsFormat": formats["text"],
                  "Contents": "Error occurred while parsing output from command. Exception info:\n" + str(ex) + "\n\nInvalid output:\n" + str(resCmdName)})
  demisto.results(res)
type: python
tags:
- Algosec
enabled: true
scripttarget: 0
subtype: python3
runonce: false
dockerimage: demisto/python3:3.7.3.286 # comment
runas: DBotWeakRole
